{"project": "aicsimageio", "project_url": "http://AllenCellModeling.github.io/aicsimageio/", "show_commit_url": "http://github.com/AllenCellModeling/aicsimageio/commit/", "hash_length": 8, "revision_to_hash": {"216": "042a55f6699002ec31f7fd72f87c841fadb18184", "226": "e505d4db1c0bb87a3d0ce16d1cf1996a86f5819e", "232": "429da135a7e8c2e800d80ffb88b4fd42d13b3710", "259": "b22b59d574b684dca0fd2fe8d0ece74ee5637526", "267": "8fd82710a5bda02be7584731bee179b619a27ba2", "270": "45d93f4d4cb90562c639279b76b2960379fd9932", "273": "60dca1d96a72604f518453062253ddf7c11fe42d", "277": "403a5065efdec8ad942b866bb11d815118e7acfe", "285": "addd72c8c7099cb05bdc9963daf33324136d1e0d", "296": "7c4e963eeb7eb6e0b83c9e14e27ea42114ca61a1", "305": "2d66d649228ed1b374bdf89b2ff95c77a1b4fb7d", "312": "9f1269f2115e9d98ba03e5c5b3f626fc0b8b1bc8", "319": "0f4259a18a09f777500b17debe3ea1e7b6b92bba", "341": "fa29ae5712a3bd4e31d6a7dbe57301359dcf8816", "349": "bfe1e04baa9d414838e986a79dd85fa0d0c2117a", "357": "8b2af4cbb4d6e7e1526575523340ea29e676797d", "364": "898ef3e7b3e7f0bc20aef1d82b3377928a7c91de", "379": "ca6ef6c15c62eb9bdc793f2904cf9b928e6e3b13", "390": "801a35574bb6cfa6eaa6c9f43f2d22b486d90d3c", "400": "b8068eddd8136fd784a7b7b191b4dce0ad95992e", "408": "3ef373312a5ee21bed600837d3dd8f1c29c4be6c", "412": "31c4a95cb55f5343b6daa32cf7d3fabb3244925a", "419": "59feba8b153f9966864dc24e7d6563a65168247c", "439": "8bc67cd4ec20863cf0f89dcd2e047283340aa56f", "445": "7824e13f9a773795a5ecd45a4fb4f580ebf8b6f7", "466": "f86b9a3310a932921bfc96e213b36b2b676a5f10", "479": "5bde1e1c12d62f8534721cd27e17a80eaef713c6", "491": "707a174acbe00acdd6a148da74f7d973e34ae7fb", "509": "1e054d284d742cec7ba7ec352f94e57e0f37ab9a", "518": "f6ff7dfd54edac3d80ece833494c171124984ae0", "527": "d89338efcdc719f3b13eeb7fa3a7b82701943e9d", "538": "dd63ff0dce9c0a36536b08c6e0626f8cccb9b821", "541": "1894aad94d4a35df4c6b9adeeaf534155870a97d", "548": "6d4f16e43c99f8af14377bd7a7dae9530bc81121", "554": "af68d65ad3749879c286ae99ceb3d3d71f41beff", "560": "abe50e2a2b8351d9ccda4900c3b0971e3ebf7781", "567": "efa7b120e57a3bbc0eeb2de5dbd6da891a408fd1", "585": "6052a0ebde25ba39e8ff8750236f17751ab37ca1", "597": "766323fd00f597681afe73ceccf6c6ef762ff5cc", "612": "13b98943a6e4bd61f7ea92a3fd83a1e362f84cd6", "625": "4aef977381669ff6fc771fef52404f3e0905934e", "640": "cb588e13bfbb62bdde2ded97ead4dd906ebb53e0", "685": "56872ccecd48c442c9ec381673244c04875bc252", "704": "002d2014bdc77a9309c1ddbf644ef531ef3362a0", "714": "28f8b368a54e98f40d871e7ceff77e8f66fdd8c1", "736": "bab8aff52c6f65138e100c5c6ee8d3b7f11c4b57", "757": "6ad676230d807e4c6f1e41b8ef526abfd4f14e1c", "761": "26e2d5e01b42db055fe2055549b2ef8d41e933ac", "762": "f8ac57494a285ce6feb22d78e03ef684cbd0009b", "766": "389ba1d25a4da70e96e83d1a6a10d5c870455a92", "769": "21ac821be2bcaf63f7159fea92a82696355fd389", "772": "a7e3592e8a30c2c9107579db93fa6978e7b9c3a9", "775": "411669cb7531bade50f8e76578b252d3c95795d9", "782": "a3b2ecf4af10015f866cc5c887672af1cc53876c", "785": "5f67224b682befcad861c69793babe38e5c35c42", "788": "e4b23e912c85b1dcea349996ac4e40d3bd0900ff", "791": "8b44ff7442b8d9484686daff10eb609e4e44a387", "794": "240c1c76a7e884aa37e11a1fbe0fcbb89fea6515", "797": "c49a613dc54381d11237240ba36f0ef54603a7d6", "811": "eed1e96e79c17117ae779b7d183e507de2b700ed", "814": "f5b8803caf6a03258c4105ad87e68772d8acba60", "825": "2a62b4ed4eff6221538f13359e4edcf7bbb42dfd", "829": "3c53ebc0af152f3a05476852531dbdbfb8231204", "838": "ae4fde09f109d49d9bf21a33d4272b9d605a6b5b", "841": "7128bb14b460482c6089ee7c83c1d541977c9e64", "844": "dca7a4126406c64a4a06603cde60eced9f765974", "848": "5df9060c5a9f2e38e9354e2ab80a2a53a717bda4", "853": "a5b519c44f40431efdd80abeca98d43221f607be", "858": "6dc06bf2c3f3952ef3343dd9cd60c68e043305ff", "865": "c04618a4e08dda0aa2df3886895fba16e6968483", "877": "45b173ccff66032bafb2868e7b4282cb9303b01c", "880": "6bda9024099068b2ee3498a0254e1240ce2f9da5", "883": "871c8042ee66518105f2bdf90fe337e04abe50af", "890": "93559b1392f74caf6bf4d4a41869ceb88d00ae4c", "893": "bd21090c233a6410c02c5452bc10a4a553858f67", "896": "0be938e4dfbc678c24d5910d3d2c7c97b22274dd", "901": "c325ba291fbb97dd1485371999b7b0e1c2cfe871", "908": "0a69f0bb159b7cf617359c34f63663b274557b83", "911": "fc1e7102c737f5287d497398de12bcd62fa47ea8", "914": "e536696562ad961506e2d3872e49a00904a131f0", "917": "d94ccb405af529e8d6c47bd526919c705884a163", "920": "e144273d87d114713808a366c01e176aaafe16c4", "923": "54ae325f9958da482aebd7408f9c403c98899d9f", "924": "657f451bd3d791a6a5965eb0fdec75243b873d4b", "929": "7f58231da79c07c9ca626835e6a96a53b6e3e076", "935": "0d469667f2db5f554502ebaf188cce7382fc8cb5", "938": "405ab6ed0139835dadc3031616c5cb42f946018c", "943": "8099b70ac5ffb555ce009c1c9c7a3de0de71d993", "948": "7f68dd9b7400432befe90d5fa9ea1d37ac228ce1"}, "revision_to_date": {"216": 1564417915000, "226": 1570212260000, "232": 1570821509000, "259": 1572042422000, "267": 1572305076000, "270": 1572462925000, "273": 1572563263000, "277": 1572975616000, "285": 1580754670000, "296": 1582312520000, "305": 1583538871000, "312": 1583965830000, "319": 1584749741000, "341": 1589392464000, "349": 1590523389000, "357": 1591918133000, "364": 1592937876000, "379": 1599669855000, "390": 1600902611000, "400": 1605591108000, "408": 1607928995000, "412": 1610580511000, "419": 1611616991000, "439": 1611796420000, "445": 1611947385000, "466": 1613792806000, "479": 1614887199000, "491": 1616624797000, "509": 1620353118000, "518": 1621292973000, "527": 1621881800000, "538": 1622478676000, "541": 1622478704000, "548": 1622566473000, "554": 1622816805000, "560": 1623078838000, "567": 1623183298000, "585": 1624401472000, "597": 1625504952000, "612": 1626103041000, "625": 1626368344000, "640": 1628556252000, "685": 1632765308000, "704": 1633732606000, "714": 1634052283000, "736": 1636063434000, "757": 1638999860000, "761": 1639694031000, "762": 1644881593000, "766": 1645377312000, "769": 1645551187000, "772": 1645558834000, "775": 1645563908000, "782": 1646107732000, "785": 1646110113000, "788": 1646113746000, "791": 1646152854000, "794": 1646266290000, "797": 1646326386000, "811": 1647639344000, "814": 1647641794000, "825": 1650383566000, "829": 1650388994000, "838": 1653182459000, "841": 1653434548000, "844": 1653583401000, "848": 1653598794000, "853": 1653606739000, "858": 1656446973000, "865": 1657903500000, "877": 1658186735000, "880": 1658195522000, "883": 1658245288000, "890": 1658508397000, "893": 1658946837000, "896": 1659046382000, "901": 1659051224000, "908": 1659454799000, "911": 1659459177000, "914": 1660230324000, "917": 1661199064000, "920": 1661296570000, "923": 1661321949000, "924": 1661322046000, "929": 1661352741000, "935": 1663607940000, "938": 1663866873000, "943": 1665457747000, "948": 1668454667000}, "params": {"machine": ["github-ci"], "python": ["3.10", "3.9"], "branch": ["main"]}, "graph_param_list": [{"machine": "github-ci", "python": "3.9", "branch": "main"}, {"machine": "github-ci", "python": "3.10", "branch": "main"}], "benchmarks": {"benchmark_chunk_sizes.ChunkSuite.time_delayed_array_construct": {"code": "class _ImageContainerTimeSuite:\n    def time_delayed_array_construct(self, img_path, chunk_dims=None):\n        \"\"\"\n        Benchmark how long it takes to construct the delayed dask array for a file.\n        \"\"\"\n        if chunk_dims is None:\n            chunk_dims = DEFAULT_CHUNK_DIMS\n    \n        self.ImageContainer(img_path, chunk_dims=chunk_dims).dask_data\n\nclass ChunkSuite:\n    def setup(self, img_path, chunk_dims):\n        random.seed(42)\n        self.ImageContainer = AICSImage", "min_run_count": 2, "name": "benchmark_chunk_sizes.ChunkSuite.time_delayed_array_construct", "number": 0, "param_names": ["param1", "param2"], "params": [["'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/pre-variance-cfe.ome.tiff'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variance-cfe.ome.tiff'"], ["'YX'", "'ZYX'", "'CYX'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "63a2c5328408b67562ba7a3ef0211dbcdf797d53bf9f8c2e0ab78b849dae38f5", "warmup_time": -1}, "benchmark_chunk_sizes.ChunkSuite.time_init": {"code": "class _ImageContainerTimeSuite:\n    def time_init(self, img_path, chunk_dims=None):\n        \"\"\"\n        Benchmark how long it takes to validate a file and finish general setup.\n        \"\"\"\n        if chunk_dims is None:\n            chunk_dims = DEFAULT_CHUNK_DIMS\n    \n        self.ImageContainer(img_path, chunk_dims=chunk_dims)\n\nclass ChunkSuite:\n    def setup(self, img_path, chunk_dims):\n        random.seed(42)\n        self.ImageContainer = AICSImage", "min_run_count": 2, "name": "benchmark_chunk_sizes.ChunkSuite.time_init", "number": 0, "param_names": ["param1", "param2"], "params": [["'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/pre-variance-cfe.ome.tiff'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variance-cfe.ome.tiff'"], ["'YX'", "'ZYX'", "'CYX'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "be6a6438d283d464871510926fe0b9bfa8ed1091b3232dc6c46be4826a079ba6", "warmup_time": -1}, "benchmark_chunk_sizes.ChunkSuite.time_norm_and_project": {"code": "class ChunkSuite:\n    def time_norm_and_project(self, img_path, chunk_dims):\n        \"\"\"\n        Benchmark how long a norm and project through Z takes\n        under various chunk dims configurations.\n        \"\"\"\n        # Init image container\n        r = self.ImageContainer(img_path, chunk_dims=chunk_dims)\n    \n        # Store all delayed projections\n        projs = []\n    \n        # Only run a random sample of two channels instead of all\n        selected_channels = random.sample(r.channel_names, 2)\n        for i, channel_name in enumerate(r.channel_names):\n            if channel_name in selected_channels:\n                # Select each channel\n                data = r.get_image_dask_data(\"ZYX\", C=i)\n    \n                # Get percentile norm by values\n                min_px_val, max_px_val = da.percentile(\n                    data.flatten(),\n                    [50.0, 99.8],\n                ).compute()\n    \n                # Norm\n                normed = (data - min_px_val) / (max_px_val - min_px_val)\n    \n                # Clip any values outside of 0 and 1\n                clipped = da.clip(normed, 0, 1)\n    \n                # Scale them between 0 and 255\n                scaled = clipped * 255\n    \n                # Create max project\n                projs.append(scaled.max(axis=0))\n    \n        # Compute all projections\n        projs = da.stack(projs)\n        projs.compute()\n\n    def setup(self, img_path, chunk_dims):\n        random.seed(42)\n        self.ImageContainer = AICSImage", "min_run_count": 2, "name": "benchmark_chunk_sizes.ChunkSuite.time_norm_and_project", "number": 0, "param_names": ["param1", "param2"], "params": [["'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/pre-variance-cfe.ome.tiff'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variance-cfe.ome.tiff'"], ["'YX'", "'ZYX'", "'CYX'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "b5dad3777502cbfe1b75b731cb0656d52034747c2c5c831437edb724814bc02a", "warmup_time": -1}, "benchmark_chunk_sizes.ChunkSuite.time_random_many_chunk_read": {"code": "class _ImageContainerTimeSuite:\n    def time_random_many_chunk_read(self, img_path, chunk_dims=None):\n        \"\"\"\n        Open a file, get many chunks out of the file at once.\n    \n        I.E. \"Pull the DNA and Nucleus channel z-stacks, for the middle 50% timepoints\".\n        \"\"\"\n        if chunk_dims is None:\n            chunk_dims = DEFAULT_CHUNK_DIMS\n    \n        r = self.ImageContainer(img_path, chunk_dims=chunk_dims)\n    \n        random_index_selections = {}\n        for dim, size in zip(r.dims.order, r.dims.shape):\n            if dim not in self.DEFAULT_CHUNK_DIMS:\n                a = random.randint(0, size - 1)\n                b = random.randint(0, size - 1)\n                lower = min(a, b)\n                upper = max(a, b)\n                random_index_selections[dim] = slice(lower, upper, 1)\n    \n        r.get_image_dask_data(r.dims.order, **random_index_selections).compute()\n\nclass ChunkSuite:\n    def setup(self, img_path, chunk_dims):\n        random.seed(42)\n        self.ImageContainer = AICSImage", "min_run_count": 2, "name": "benchmark_chunk_sizes.ChunkSuite.time_random_many_chunk_read", "number": 0, "param_names": ["param1", "param2"], "params": [["'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/pre-variance-cfe.ome.tiff'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variance-cfe.ome.tiff'"], ["'YX'", "'ZYX'", "'CYX'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "606fb733a24f8a23ac4856dd1b4e4856505e46b429cc37e3bed6f1f5cbadc98c", "warmup_time": -1}, "benchmark_chunk_sizes.ChunkSuite.time_random_single_chunk_read": {"code": "class _ImageContainerTimeSuite:\n    def time_random_single_chunk_read(self, img_path, chunk_dims=None):\n        \"\"\"\n        Benchmark how long it takes to read a single chunk out of a file.\n    \n        I.E. \"Pull just the Brightfield channel z-stack.\n        \"\"\"\n        if chunk_dims is None:\n            chunk_dims = DEFAULT_CHUNK_DIMS\n    \n        r = self.ImageContainer(img_path, chunk_dims=chunk_dims)\n    \n        random_index_selections = {}\n        for dim, size in zip(r.dims.order, r.dims.shape):\n            if dim not in self.DEFAULT_CHUNK_DIMS:\n                random_index_selections[dim] = random.randint(0, size - 1)\n    \n        valid_dims_to_return = \"\".join(\n            [d for d in r.dims.order if d in self.DEFAULT_CHUNK_DIMS]\n        )\n        r.get_image_dask_data(valid_dims_to_return, **random_index_selections).compute()\n\nclass ChunkSuite:\n    def setup(self, img_path, chunk_dims):\n        random.seed(42)\n        self.ImageContainer = AICSImage", "min_run_count": 2, "name": "benchmark_chunk_sizes.ChunkSuite.time_random_single_chunk_read", "number": 0, "param_names": ["param1", "param2"], "params": [["'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/pre-variance-cfe.ome.tiff'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variance-cfe.ome.tiff'"], ["'YX'", "'ZYX'", "'CYX'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "e2725a48590c460a3355d1b48e67fc837323d1910c4a47142381c62241284785", "warmup_time": -1}, "benchmark_image_containers.AICSImageSuite.peakmem_cached_array": {"code": "class _ImageContainerMemorySuite:\n    def peakmem_cached_array(self, img_path):\n        \"\"\"\n        Benchmark how much memory is used for the whole image container once the\n        current scene is read into memory.\n    \n        Serves as a comparison against the delayed construct and as a sanity check.\n        Estimate: `r.data.size * r.data.itemsize` + some metadata and object overhead.\n        \"\"\"\n        r = self.ImageContainer(img_path)\n        r.data\n        return r\n\nclass AICSImageSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = AICSImage", "name": "benchmark_image_containers.AICSImageSuite.peakmem_cached_array", "param_names": ["param1"], "params": [["'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_1_c_1_z_1.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/pre-variance-cfe_ome_tiff_tiles.ome.tif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.jpg'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_4_c_2_z_1.lif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/merged-tiles.lif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/image_stack_tpzc_50tp_2p_5z_3c_512k_1_MMStack_2-Pos001_000.ome.tif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variance-cfe_ome_tiff_tiles.ome.tif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/OverViewScan.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variable_scene_shape_first_scene_pyramid.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variance-cfe.ome.tiff'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/actk.ome.tiff'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.png'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_1_c_2_z_1.lif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/S=2_4x2_T=2=Z=3_CH=2.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/tiled.lif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/pre-variance-cfe.ome.tiff'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/actk_ome_tiff_tiles.ome.tif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_3_t_1_c_3_z_5.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.bmp'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/RGB-8bit.czi'"]], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "96bf4fa0e641225c55328c135e642531039558988c72c875aca5e23f613ab871"}, "benchmark_image_containers.AICSImageSuite.peakmem_delayed_array": {"code": "class _ImageContainerMemorySuite:\n    def peakmem_delayed_array(self, img_path):\n        \"\"\"\n        Benchmark how much memory is used for the image container once the\n        delayed dask array is constructed.\n    \n        Serves as a comparison against the init.\n        Metadata should account for most of the memory difference.\n        \"\"\"\n        r = self.ImageContainer(img_path)\n        r.dask_data\n        return r\n\nclass AICSImageSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = AICSImage", "name": "benchmark_image_containers.AICSImageSuite.peakmem_delayed_array", "param_names": ["param1"], "params": [["'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_1_c_1_z_1.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/pre-variance-cfe_ome_tiff_tiles.ome.tif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.jpg'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_4_c_2_z_1.lif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/merged-tiles.lif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/image_stack_tpzc_50tp_2p_5z_3c_512k_1_MMStack_2-Pos001_000.ome.tif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variance-cfe_ome_tiff_tiles.ome.tif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/OverViewScan.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variable_scene_shape_first_scene_pyramid.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variance-cfe.ome.tiff'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/actk.ome.tiff'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.png'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_1_c_2_z_1.lif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/S=2_4x2_T=2=Z=3_CH=2.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/tiled.lif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/pre-variance-cfe.ome.tiff'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/actk_ome_tiff_tiles.ome.tif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_3_t_1_c_3_z_5.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.bmp'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/RGB-8bit.czi'"]], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "45da41275febe6e273cc10ad8353b15f20a93c4c726c4b8300d2a8dfbf2b5f7f"}, "benchmark_image_containers.AICSImageSuite.peakmem_init": {"code": "class _ImageContainerMemorySuite:\n    def peakmem_init(self, img_path):\n        \"\"\"\n        Benchmark how much memory is used for just the initialized image container.\n        \"\"\"\n        return self.ImageContainer(img_path)\n\nclass AICSImageSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = AICSImage", "name": "benchmark_image_containers.AICSImageSuite.peakmem_init", "param_names": ["param1"], "params": [["'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_1_c_1_z_1.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/pre-variance-cfe_ome_tiff_tiles.ome.tif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.jpg'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_4_c_2_z_1.lif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/merged-tiles.lif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/image_stack_tpzc_50tp_2p_5z_3c_512k_1_MMStack_2-Pos001_000.ome.tif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variance-cfe_ome_tiff_tiles.ome.tif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/OverViewScan.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variable_scene_shape_first_scene_pyramid.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variance-cfe.ome.tiff'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/actk.ome.tiff'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.png'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_1_c_2_z_1.lif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/S=2_4x2_T=2=Z=3_CH=2.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/tiled.lif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/pre-variance-cfe.ome.tiff'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/actk_ome_tiff_tiles.ome.tif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_3_t_1_c_3_z_5.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.bmp'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/RGB-8bit.czi'"]], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "41eb1224e96f965e90b8901a2af478c879b7f73537eac38521e88c429d31cfae"}, "benchmark_image_containers.AICSImageSuite.time_delayed_array_construct": {"code": "class _ImageContainerTimeSuite:\n    def time_delayed_array_construct(self, img_path, chunk_dims=None):\n        \"\"\"\n        Benchmark how long it takes to construct the delayed dask array for a file.\n        \"\"\"\n        if chunk_dims is None:\n            chunk_dims = DEFAULT_CHUNK_DIMS\n    \n        self.ImageContainer(img_path, chunk_dims=chunk_dims).dask_data\n\nclass AICSImageSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = AICSImage", "min_run_count": 2, "name": "benchmark_image_containers.AICSImageSuite.time_delayed_array_construct", "number": 0, "param_names": ["param1"], "params": [["'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_1_c_1_z_1.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/pre-variance-cfe_ome_tiff_tiles.ome.tif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.jpg'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_4_c_2_z_1.lif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/merged-tiles.lif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/image_stack_tpzc_50tp_2p_5z_3c_512k_1_MMStack_2-Pos001_000.ome.tif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variance-cfe_ome_tiff_tiles.ome.tif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/OverViewScan.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variable_scene_shape_first_scene_pyramid.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variance-cfe.ome.tiff'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/actk.ome.tiff'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.png'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_1_c_2_z_1.lif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/S=2_4x2_T=2=Z=3_CH=2.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/tiled.lif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/pre-variance-cfe.ome.tiff'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/actk_ome_tiff_tiles.ome.tif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_3_t_1_c_3_z_5.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.bmp'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/RGB-8bit.czi'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "abf800930ee2a03c324713cd9c9dac12f46d3763499011107535f2699b710f21", "warmup_time": -1}, "benchmark_image_containers.AICSImageSuite.time_init": {"code": "class _ImageContainerTimeSuite:\n    def time_init(self, img_path, chunk_dims=None):\n        \"\"\"\n        Benchmark how long it takes to validate a file and finish general setup.\n        \"\"\"\n        if chunk_dims is None:\n            chunk_dims = DEFAULT_CHUNK_DIMS\n    \n        self.ImageContainer(img_path, chunk_dims=chunk_dims)\n\nclass AICSImageSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = AICSImage", "min_run_count": 2, "name": "benchmark_image_containers.AICSImageSuite.time_init", "number": 0, "param_names": ["param1"], "params": [["'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_1_c_1_z_1.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/pre-variance-cfe_ome_tiff_tiles.ome.tif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.jpg'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_4_c_2_z_1.lif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/merged-tiles.lif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/image_stack_tpzc_50tp_2p_5z_3c_512k_1_MMStack_2-Pos001_000.ome.tif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variance-cfe_ome_tiff_tiles.ome.tif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/OverViewScan.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variable_scene_shape_first_scene_pyramid.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variance-cfe.ome.tiff'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/actk.ome.tiff'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.png'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_1_c_2_z_1.lif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/S=2_4x2_T=2=Z=3_CH=2.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/tiled.lif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/pre-variance-cfe.ome.tiff'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/actk_ome_tiff_tiles.ome.tif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_3_t_1_c_3_z_5.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.bmp'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/RGB-8bit.czi'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "6be052362717a92084bf41b6768ca4a4a7e2d6cb0d5bcb7bf5376937ce31abbe", "warmup_time": -1}, "benchmark_image_containers.AICSImageSuite.time_random_many_chunk_read": {"code": "class _ImageContainerTimeSuite:\n    def time_random_many_chunk_read(self, img_path, chunk_dims=None):\n        \"\"\"\n        Open a file, get many chunks out of the file at once.\n    \n        I.E. \"Pull the DNA and Nucleus channel z-stacks, for the middle 50% timepoints\".\n        \"\"\"\n        if chunk_dims is None:\n            chunk_dims = DEFAULT_CHUNK_DIMS\n    \n        r = self.ImageContainer(img_path, chunk_dims=chunk_dims)\n    \n        random_index_selections = {}\n        for dim, size in zip(r.dims.order, r.dims.shape):\n            if dim not in self.DEFAULT_CHUNK_DIMS:\n                a = random.randint(0, size - 1)\n                b = random.randint(0, size - 1)\n                lower = min(a, b)\n                upper = max(a, b)\n                random_index_selections[dim] = slice(lower, upper, 1)\n    \n        r.get_image_dask_data(r.dims.order, **random_index_selections).compute()\n\nclass AICSImageSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = AICSImage", "min_run_count": 2, "name": "benchmark_image_containers.AICSImageSuite.time_random_many_chunk_read", "number": 0, "param_names": ["param1"], "params": [["'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_1_c_1_z_1.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/pre-variance-cfe_ome_tiff_tiles.ome.tif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.jpg'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_4_c_2_z_1.lif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/merged-tiles.lif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/image_stack_tpzc_50tp_2p_5z_3c_512k_1_MMStack_2-Pos001_000.ome.tif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variance-cfe_ome_tiff_tiles.ome.tif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/OverViewScan.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variable_scene_shape_first_scene_pyramid.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variance-cfe.ome.tiff'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/actk.ome.tiff'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.png'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_1_c_2_z_1.lif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/S=2_4x2_T=2=Z=3_CH=2.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/tiled.lif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/pre-variance-cfe.ome.tiff'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/actk_ome_tiff_tiles.ome.tif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_3_t_1_c_3_z_5.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.bmp'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/RGB-8bit.czi'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "9fa851b3f927ca2cb74fa9776acaf19c7d2190689cd68aa98d43119980cfa33b", "warmup_time": -1}, "benchmark_image_containers.AICSImageSuite.time_random_single_chunk_read": {"code": "class _ImageContainerTimeSuite:\n    def time_random_single_chunk_read(self, img_path, chunk_dims=None):\n        \"\"\"\n        Benchmark how long it takes to read a single chunk out of a file.\n    \n        I.E. \"Pull just the Brightfield channel z-stack.\n        \"\"\"\n        if chunk_dims is None:\n            chunk_dims = DEFAULT_CHUNK_DIMS\n    \n        r = self.ImageContainer(img_path, chunk_dims=chunk_dims)\n    \n        random_index_selections = {}\n        for dim, size in zip(r.dims.order, r.dims.shape):\n            if dim not in self.DEFAULT_CHUNK_DIMS:\n                random_index_selections[dim] = random.randint(0, size - 1)\n    \n        valid_dims_to_return = \"\".join(\n            [d for d in r.dims.order if d in self.DEFAULT_CHUNK_DIMS]\n        )\n        r.get_image_dask_data(valid_dims_to_return, **random_index_selections).compute()\n\nclass AICSImageSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = AICSImage", "min_run_count": 2, "name": "benchmark_image_containers.AICSImageSuite.time_random_single_chunk_read", "number": 0, "param_names": ["param1"], "params": [["'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_1_c_1_z_1.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/pre-variance-cfe_ome_tiff_tiles.ome.tif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.jpg'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_4_c_2_z_1.lif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/merged-tiles.lif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/image_stack_tpzc_50tp_2p_5z_3c_512k_1_MMStack_2-Pos001_000.ome.tif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variance-cfe_ome_tiff_tiles.ome.tif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/OverViewScan.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variable_scene_shape_first_scene_pyramid.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variance-cfe.ome.tiff'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/actk.ome.tiff'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.png'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_1_c_2_z_1.lif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/S=2_4x2_T=2=Z=3_CH=2.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/tiled.lif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/pre-variance-cfe.ome.tiff'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/actk_ome_tiff_tiles.ome.tif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_3_t_1_c_3_z_5.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.bmp'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/RGB-8bit.czi'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "cbdef323fe6dcfbb6d8390552b0c83359922040ef9fe8561cde8db5617da1ecc", "warmup_time": -1}, "benchmark_image_containers.CziReaderSuite.peakmem_cached_array": {"code": "class _ImageContainerMemorySuite:\n    def peakmem_cached_array(self, img_path):\n        \"\"\"\n        Benchmark how much memory is used for the whole image container once the\n        current scene is read into memory.\n    \n        Serves as a comparison against the delayed construct and as a sanity check.\n        Estimate: `r.data.size * r.data.itemsize` + some metadata and object overhead.\n        \"\"\"\n        r = self.ImageContainer(img_path)\n        r.data\n        return r\n\nclass CziReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.czi_reader.CziReader", "name": "benchmark_image_containers.CziReaderSuite.peakmem_cached_array", "param_names": ["param1"], "params": [["'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/OverViewScan.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/RGB-8bit.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/S=2_4x2_T=2=Z=3_CH=2.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_1_c_1_z_1.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_3_t_1_c_3_z_5.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variable_scene_shape_first_scene_pyramid.czi'"]], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "9808d4aa73201880928bc54761a214a050232b9c6ef59d552dea28247befd511"}, "benchmark_image_containers.CziReaderSuite.peakmem_delayed_array": {"code": "class _ImageContainerMemorySuite:\n    def peakmem_delayed_array(self, img_path):\n        \"\"\"\n        Benchmark how much memory is used for the image container once the\n        delayed dask array is constructed.\n    \n        Serves as a comparison against the init.\n        Metadata should account for most of the memory difference.\n        \"\"\"\n        r = self.ImageContainer(img_path)\n        r.dask_data\n        return r\n\nclass CziReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.czi_reader.CziReader", "name": "benchmark_image_containers.CziReaderSuite.peakmem_delayed_array", "param_names": ["param1"], "params": [["'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/OverViewScan.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/RGB-8bit.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/S=2_4x2_T=2=Z=3_CH=2.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_1_c_1_z_1.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_3_t_1_c_3_z_5.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variable_scene_shape_first_scene_pyramid.czi'"]], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "44c00825f9656cf30f7368a8a320ed187e18dce4a9d5a433fdd49d9b7d6ed062"}, "benchmark_image_containers.CziReaderSuite.peakmem_init": {"code": "class _ImageContainerMemorySuite:\n    def peakmem_init(self, img_path):\n        \"\"\"\n        Benchmark how much memory is used for just the initialized image container.\n        \"\"\"\n        return self.ImageContainer(img_path)\n\nclass CziReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.czi_reader.CziReader", "name": "benchmark_image_containers.CziReaderSuite.peakmem_init", "param_names": ["param1"], "params": [["'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/OverViewScan.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/RGB-8bit.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/S=2_4x2_T=2=Z=3_CH=2.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_1_c_1_z_1.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_3_t_1_c_3_z_5.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variable_scene_shape_first_scene_pyramid.czi'"]], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "33f1857abd218a5e2714a368e151c551702b377c0c4d7d4bcd414d93455b871e"}, "benchmark_image_containers.CziReaderSuite.time_delayed_array_construct": {"code": "class _ImageContainerTimeSuite:\n    def time_delayed_array_construct(self, img_path, chunk_dims=None):\n        \"\"\"\n        Benchmark how long it takes to construct the delayed dask array for a file.\n        \"\"\"\n        if chunk_dims is None:\n            chunk_dims = DEFAULT_CHUNK_DIMS\n    \n        self.ImageContainer(img_path, chunk_dims=chunk_dims).dask_data\n\nclass CziReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.czi_reader.CziReader", "min_run_count": 2, "name": "benchmark_image_containers.CziReaderSuite.time_delayed_array_construct", "number": 0, "param_names": ["param1"], "params": [["'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/OverViewScan.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/RGB-8bit.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/S=2_4x2_T=2=Z=3_CH=2.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_1_c_1_z_1.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_3_t_1_c_3_z_5.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variable_scene_shape_first_scene_pyramid.czi'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "1f22b74d4730f78edc65bc835e7ed7194a5e4726e36ae8b486240a5a9ff2aa27", "warmup_time": -1}, "benchmark_image_containers.CziReaderSuite.time_init": {"code": "class _ImageContainerTimeSuite:\n    def time_init(self, img_path, chunk_dims=None):\n        \"\"\"\n        Benchmark how long it takes to validate a file and finish general setup.\n        \"\"\"\n        if chunk_dims is None:\n            chunk_dims = DEFAULT_CHUNK_DIMS\n    \n        self.ImageContainer(img_path, chunk_dims=chunk_dims)\n\nclass CziReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.czi_reader.CziReader", "min_run_count": 2, "name": "benchmark_image_containers.CziReaderSuite.time_init", "number": 0, "param_names": ["param1"], "params": [["'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/OverViewScan.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/RGB-8bit.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/S=2_4x2_T=2=Z=3_CH=2.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_1_c_1_z_1.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_3_t_1_c_3_z_5.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variable_scene_shape_first_scene_pyramid.czi'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "a35ab39af3cc693148440dea0c634531305b4baf5570dec6222eac8a95344676", "warmup_time": -1}, "benchmark_image_containers.CziReaderSuite.time_random_many_chunk_read": {"code": "class _ImageContainerTimeSuite:\n    def time_random_many_chunk_read(self, img_path, chunk_dims=None):\n        \"\"\"\n        Open a file, get many chunks out of the file at once.\n    \n        I.E. \"Pull the DNA and Nucleus channel z-stacks, for the middle 50% timepoints\".\n        \"\"\"\n        if chunk_dims is None:\n            chunk_dims = DEFAULT_CHUNK_DIMS\n    \n        r = self.ImageContainer(img_path, chunk_dims=chunk_dims)\n    \n        random_index_selections = {}\n        for dim, size in zip(r.dims.order, r.dims.shape):\n            if dim not in self.DEFAULT_CHUNK_DIMS:\n                a = random.randint(0, size - 1)\n                b = random.randint(0, size - 1)\n                lower = min(a, b)\n                upper = max(a, b)\n                random_index_selections[dim] = slice(lower, upper, 1)\n    \n        r.get_image_dask_data(r.dims.order, **random_index_selections).compute()\n\nclass CziReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.czi_reader.CziReader", "min_run_count": 2, "name": "benchmark_image_containers.CziReaderSuite.time_random_many_chunk_read", "number": 0, "param_names": ["param1"], "params": [["'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/OverViewScan.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/RGB-8bit.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/S=2_4x2_T=2=Z=3_CH=2.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_1_c_1_z_1.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_3_t_1_c_3_z_5.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variable_scene_shape_first_scene_pyramid.czi'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "bd0408dd47278345053f801d752d57a82a9bb41ac558644a61e6b0989a3aa94d", "warmup_time": -1}, "benchmark_image_containers.CziReaderSuite.time_random_single_chunk_read": {"code": "class _ImageContainerTimeSuite:\n    def time_random_single_chunk_read(self, img_path, chunk_dims=None):\n        \"\"\"\n        Benchmark how long it takes to read a single chunk out of a file.\n    \n        I.E. \"Pull just the Brightfield channel z-stack.\n        \"\"\"\n        if chunk_dims is None:\n            chunk_dims = DEFAULT_CHUNK_DIMS\n    \n        r = self.ImageContainer(img_path, chunk_dims=chunk_dims)\n    \n        random_index_selections = {}\n        for dim, size in zip(r.dims.order, r.dims.shape):\n            if dim not in self.DEFAULT_CHUNK_DIMS:\n                random_index_selections[dim] = random.randint(0, size - 1)\n    \n        valid_dims_to_return = \"\".join(\n            [d for d in r.dims.order if d in self.DEFAULT_CHUNK_DIMS]\n        )\n        r.get_image_dask_data(valid_dims_to_return, **random_index_selections).compute()\n\nclass CziReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.czi_reader.CziReader", "min_run_count": 2, "name": "benchmark_image_containers.CziReaderSuite.time_random_single_chunk_read", "number": 0, "param_names": ["param1"], "params": [["'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/OverViewScan.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/RGB-8bit.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/S=2_4x2_T=2=Z=3_CH=2.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_1_c_1_z_1.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_3_t_1_c_3_z_5.czi'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variable_scene_shape_first_scene_pyramid.czi'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "3c55513549997795fa56eacb51185995d50cdc409ac486d786d5324de7af540d", "warmup_time": -1}, "benchmark_image_containers.DefaultReaderSuite.peakmem_cached_array": {"code": "class _ImageContainerMemorySuite:\n    def peakmem_cached_array(self, img_path):\n        \"\"\"\n        Benchmark how much memory is used for the whole image container once the\n        current scene is read into memory.\n    \n        Serves as a comparison against the delayed construct and as a sanity check.\n        Estimate: `r.data.size * r.data.itemsize` + some metadata and object overhead.\n        \"\"\"\n        r = self.ImageContainer(img_path)\n        r.data\n        return r\n\nclass DefaultReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.default_reader.DefaultReader", "name": "benchmark_image_containers.DefaultReaderSuite.peakmem_cached_array", "param_names": ["param1"], "params": [["'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.bmp'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.jpg'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.png'"]], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "a3f513519b2d92bee5feec6431e500b7dc115bf0f2d8a6259483d5638dec0232"}, "benchmark_image_containers.DefaultReaderSuite.peakmem_delayed_array": {"code": "class _ImageContainerMemorySuite:\n    def peakmem_delayed_array(self, img_path):\n        \"\"\"\n        Benchmark how much memory is used for the image container once the\n        delayed dask array is constructed.\n    \n        Serves as a comparison against the init.\n        Metadata should account for most of the memory difference.\n        \"\"\"\n        r = self.ImageContainer(img_path)\n        r.dask_data\n        return r\n\nclass DefaultReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.default_reader.DefaultReader", "name": "benchmark_image_containers.DefaultReaderSuite.peakmem_delayed_array", "param_names": ["param1"], "params": [["'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.bmp'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.jpg'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.png'"]], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "9a7b78d566cf94bcb09881d4efebb2890b5d18d78842766e1a65fc523df90d48"}, "benchmark_image_containers.DefaultReaderSuite.peakmem_init": {"code": "class _ImageContainerMemorySuite:\n    def peakmem_init(self, img_path):\n        \"\"\"\n        Benchmark how much memory is used for just the initialized image container.\n        \"\"\"\n        return self.ImageContainer(img_path)\n\nclass DefaultReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.default_reader.DefaultReader", "name": "benchmark_image_containers.DefaultReaderSuite.peakmem_init", "param_names": ["param1"], "params": [["'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.bmp'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.jpg'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.png'"]], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "0f3dc369b7619e22b40b45814175b296b58004bb6dedf4b87a13869522fc71c9"}, "benchmark_image_containers.DefaultReaderSuite.time_delayed_array_construct": {"code": "class _ImageContainerTimeSuite:\n    def time_delayed_array_construct(self, img_path, chunk_dims=None):\n        \"\"\"\n        Benchmark how long it takes to construct the delayed dask array for a file.\n        \"\"\"\n        if chunk_dims is None:\n            chunk_dims = DEFAULT_CHUNK_DIMS\n    \n        self.ImageContainer(img_path, chunk_dims=chunk_dims).dask_data\n\nclass DefaultReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.default_reader.DefaultReader", "min_run_count": 2, "name": "benchmark_image_containers.DefaultReaderSuite.time_delayed_array_construct", "number": 0, "param_names": ["param1"], "params": [["'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.bmp'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.jpg'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.png'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "a93e7fa54db0ccbaf57693d7f8438e78d6172fff3c1daa30a1b714eaef386141", "warmup_time": -1}, "benchmark_image_containers.DefaultReaderSuite.time_init": {"code": "class _ImageContainerTimeSuite:\n    def time_init(self, img_path, chunk_dims=None):\n        \"\"\"\n        Benchmark how long it takes to validate a file and finish general setup.\n        \"\"\"\n        if chunk_dims is None:\n            chunk_dims = DEFAULT_CHUNK_DIMS\n    \n        self.ImageContainer(img_path, chunk_dims=chunk_dims)\n\nclass DefaultReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.default_reader.DefaultReader", "min_run_count": 2, "name": "benchmark_image_containers.DefaultReaderSuite.time_init", "number": 0, "param_names": ["param1"], "params": [["'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.bmp'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.jpg'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.png'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "9051005b54d4374b1618bd93d5f57405a5949d5602db73e98c1598af1599805d", "warmup_time": -1}, "benchmark_image_containers.DefaultReaderSuite.time_random_many_chunk_read": {"code": "class _ImageContainerTimeSuite:\n    def time_random_many_chunk_read(self, img_path, chunk_dims=None):\n        \"\"\"\n        Open a file, get many chunks out of the file at once.\n    \n        I.E. \"Pull the DNA and Nucleus channel z-stacks, for the middle 50% timepoints\".\n        \"\"\"\n        if chunk_dims is None:\n            chunk_dims = DEFAULT_CHUNK_DIMS\n    \n        r = self.ImageContainer(img_path, chunk_dims=chunk_dims)\n    \n        random_index_selections = {}\n        for dim, size in zip(r.dims.order, r.dims.shape):\n            if dim not in self.DEFAULT_CHUNK_DIMS:\n                a = random.randint(0, size - 1)\n                b = random.randint(0, size - 1)\n                lower = min(a, b)\n                upper = max(a, b)\n                random_index_selections[dim] = slice(lower, upper, 1)\n    \n        r.get_image_dask_data(r.dims.order, **random_index_selections).compute()\n\nclass DefaultReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.default_reader.DefaultReader", "min_run_count": 2, "name": "benchmark_image_containers.DefaultReaderSuite.time_random_many_chunk_read", "number": 0, "param_names": ["param1"], "params": [["'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.bmp'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.jpg'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.png'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "f9611c4c11dfc2fdb39b33017ab1bd5cae0ecd8be287c3a1752728c08c0d9dbf", "warmup_time": -1}, "benchmark_image_containers.DefaultReaderSuite.time_random_single_chunk_read": {"code": "class _ImageContainerTimeSuite:\n    def time_random_single_chunk_read(self, img_path, chunk_dims=None):\n        \"\"\"\n        Benchmark how long it takes to read a single chunk out of a file.\n    \n        I.E. \"Pull just the Brightfield channel z-stack.\n        \"\"\"\n        if chunk_dims is None:\n            chunk_dims = DEFAULT_CHUNK_DIMS\n    \n        r = self.ImageContainer(img_path, chunk_dims=chunk_dims)\n    \n        random_index_selections = {}\n        for dim, size in zip(r.dims.order, r.dims.shape):\n            if dim not in self.DEFAULT_CHUNK_DIMS:\n                random_index_selections[dim] = random.randint(0, size - 1)\n    \n        valid_dims_to_return = \"\".join(\n            [d for d in r.dims.order if d in self.DEFAULT_CHUNK_DIMS]\n        )\n        r.get_image_dask_data(valid_dims_to_return, **random_index_selections).compute()\n\nclass DefaultReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.default_reader.DefaultReader", "min_run_count": 2, "name": "benchmark_image_containers.DefaultReaderSuite.time_random_single_chunk_read", "number": 0, "param_names": ["param1"], "params": [["'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.bmp'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.jpg'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.png'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "3e9957c6be057f681903108d59b0ac4bb5b916e7466f547f11a137ec672d071f", "warmup_time": -1}, "benchmark_image_containers.LifReaderSuite.peakmem_cached_array": {"code": "class _ImageContainerMemorySuite:\n    def peakmem_cached_array(self, img_path):\n        \"\"\"\n        Benchmark how much memory is used for the whole image container once the\n        current scene is read into memory.\n    \n        Serves as a comparison against the delayed construct and as a sanity check.\n        Estimate: `r.data.size * r.data.itemsize` + some metadata and object overhead.\n        \"\"\"\n        r = self.ImageContainer(img_path)\n        r.data\n        return r\n\nclass LifReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.lif_reader.LifReader", "name": "benchmark_image_containers.LifReaderSuite.peakmem_cached_array", "param_names": ["param1"], "params": [["'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/merged-tiles.lif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_1_c_2_z_1.lif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_4_c_2_z_1.lif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/tiled.lif'"]], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "0cd762cd49201bea3ce2a0bab030812f5f5e5bc4bd199457424cff7ee615c9d6"}, "benchmark_image_containers.LifReaderSuite.peakmem_delayed_array": {"code": "class _ImageContainerMemorySuite:\n    def peakmem_delayed_array(self, img_path):\n        \"\"\"\n        Benchmark how much memory is used for the image container once the\n        delayed dask array is constructed.\n    \n        Serves as a comparison against the init.\n        Metadata should account for most of the memory difference.\n        \"\"\"\n        r = self.ImageContainer(img_path)\n        r.dask_data\n        return r\n\nclass LifReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.lif_reader.LifReader", "name": "benchmark_image_containers.LifReaderSuite.peakmem_delayed_array", "param_names": ["param1"], "params": [["'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/merged-tiles.lif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_1_c_2_z_1.lif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_4_c_2_z_1.lif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/tiled.lif'"]], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "9c1649c2de07cb6ecc3376b73c07657c81447bccf215b40e158ea372d27be425"}, "benchmark_image_containers.LifReaderSuite.peakmem_init": {"code": "class _ImageContainerMemorySuite:\n    def peakmem_init(self, img_path):\n        \"\"\"\n        Benchmark how much memory is used for just the initialized image container.\n        \"\"\"\n        return self.ImageContainer(img_path)\n\nclass LifReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.lif_reader.LifReader", "name": "benchmark_image_containers.LifReaderSuite.peakmem_init", "param_names": ["param1"], "params": [["'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/merged-tiles.lif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_1_c_2_z_1.lif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_4_c_2_z_1.lif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/tiled.lif'"]], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "fc74eb7c6a588e0e454ea69f4a1d06234ce31e6f12bca3d71d2163cff26539fa"}, "benchmark_image_containers.LifReaderSuite.time_delayed_array_construct": {"code": "class _ImageContainerTimeSuite:\n    def time_delayed_array_construct(self, img_path, chunk_dims=None):\n        \"\"\"\n        Benchmark how long it takes to construct the delayed dask array for a file.\n        \"\"\"\n        if chunk_dims is None:\n            chunk_dims = DEFAULT_CHUNK_DIMS\n    \n        self.ImageContainer(img_path, chunk_dims=chunk_dims).dask_data\n\nclass LifReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.lif_reader.LifReader", "min_run_count": 2, "name": "benchmark_image_containers.LifReaderSuite.time_delayed_array_construct", "number": 0, "param_names": ["param1"], "params": [["'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/merged-tiles.lif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_1_c_2_z_1.lif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_4_c_2_z_1.lif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/tiled.lif'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "706b522d926247224e35716fb587c101705268401d22df7155c213139c9825ef", "warmup_time": -1}, "benchmark_image_containers.LifReaderSuite.time_init": {"code": "class _ImageContainerTimeSuite:\n    def time_init(self, img_path, chunk_dims=None):\n        \"\"\"\n        Benchmark how long it takes to validate a file and finish general setup.\n        \"\"\"\n        if chunk_dims is None:\n            chunk_dims = DEFAULT_CHUNK_DIMS\n    \n        self.ImageContainer(img_path, chunk_dims=chunk_dims)\n\nclass LifReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.lif_reader.LifReader", "min_run_count": 2, "name": "benchmark_image_containers.LifReaderSuite.time_init", "number": 0, "param_names": ["param1"], "params": [["'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/merged-tiles.lif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_1_c_2_z_1.lif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_4_c_2_z_1.lif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/tiled.lif'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "bd8f9a76e6b85943499b95485e181bb01f2eaaadcd5f45fbe0a255ec0b8935df", "warmup_time": -1}, "benchmark_image_containers.LifReaderSuite.time_random_many_chunk_read": {"code": "class _ImageContainerTimeSuite:\n    def time_random_many_chunk_read(self, img_path, chunk_dims=None):\n        \"\"\"\n        Open a file, get many chunks out of the file at once.\n    \n        I.E. \"Pull the DNA and Nucleus channel z-stacks, for the middle 50% timepoints\".\n        \"\"\"\n        if chunk_dims is None:\n            chunk_dims = DEFAULT_CHUNK_DIMS\n    \n        r = self.ImageContainer(img_path, chunk_dims=chunk_dims)\n    \n        random_index_selections = {}\n        for dim, size in zip(r.dims.order, r.dims.shape):\n            if dim not in self.DEFAULT_CHUNK_DIMS:\n                a = random.randint(0, size - 1)\n                b = random.randint(0, size - 1)\n                lower = min(a, b)\n                upper = max(a, b)\n                random_index_selections[dim] = slice(lower, upper, 1)\n    \n        r.get_image_dask_data(r.dims.order, **random_index_selections).compute()\n\nclass LifReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.lif_reader.LifReader", "min_run_count": 2, "name": "benchmark_image_containers.LifReaderSuite.time_random_many_chunk_read", "number": 0, "param_names": ["param1"], "params": [["'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/merged-tiles.lif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_1_c_2_z_1.lif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_4_c_2_z_1.lif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/tiled.lif'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "a383a9936dec04d88efca58b4f9eae2dc9eee6165a6ccd228e7bd7676569e748", "warmup_time": -1}, "benchmark_image_containers.LifReaderSuite.time_random_single_chunk_read": {"code": "class _ImageContainerTimeSuite:\n    def time_random_single_chunk_read(self, img_path, chunk_dims=None):\n        \"\"\"\n        Benchmark how long it takes to read a single chunk out of a file.\n    \n        I.E. \"Pull just the Brightfield channel z-stack.\n        \"\"\"\n        if chunk_dims is None:\n            chunk_dims = DEFAULT_CHUNK_DIMS\n    \n        r = self.ImageContainer(img_path, chunk_dims=chunk_dims)\n    \n        random_index_selections = {}\n        for dim, size in zip(r.dims.order, r.dims.shape):\n            if dim not in self.DEFAULT_CHUNK_DIMS:\n                random_index_selections[dim] = random.randint(0, size - 1)\n    \n        valid_dims_to_return = \"\".join(\n            [d for d in r.dims.order if d in self.DEFAULT_CHUNK_DIMS]\n        )\n        r.get_image_dask_data(valid_dims_to_return, **random_index_selections).compute()\n\nclass LifReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.lif_reader.LifReader", "min_run_count": 2, "name": "benchmark_image_containers.LifReaderSuite.time_random_single_chunk_read", "number": 0, "param_names": ["param1"], "params": [["'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/merged-tiles.lif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_1_c_2_z_1.lif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_4_c_2_z_1.lif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/tiled.lif'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "8472450d15eba774cfd27ba199e2f0fcae8f72e93921d31d317f06fe41a3388c", "warmup_time": -1}, "benchmark_image_containers.OmeTiffReaderSuite.peakmem_cached_array": {"code": "class _ImageContainerMemorySuite:\n    def peakmem_cached_array(self, img_path):\n        \"\"\"\n        Benchmark how much memory is used for the whole image container once the\n        current scene is read into memory.\n    \n        Serves as a comparison against the delayed construct and as a sanity check.\n        Estimate: `r.data.size * r.data.itemsize` + some metadata and object overhead.\n        \"\"\"\n        r = self.ImageContainer(img_path)\n        r.data\n        return r\n\nclass OmeTiffReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.ome_tiff_reader.OmeTiffReader", "name": "benchmark_image_containers.OmeTiffReaderSuite.peakmem_cached_array", "param_names": ["param1"], "params": [["'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/actk.ome.tiff'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/pre-variance-cfe.ome.tiff'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variance-cfe.ome.tiff'"]], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "5f26a0e7129f3703cd0001a271dade511f1f87b23a31bcda5dec9669f5c4cec1"}, "benchmark_image_containers.OmeTiffReaderSuite.peakmem_delayed_array": {"code": "class _ImageContainerMemorySuite:\n    def peakmem_delayed_array(self, img_path):\n        \"\"\"\n        Benchmark how much memory is used for the image container once the\n        delayed dask array is constructed.\n    \n        Serves as a comparison against the init.\n        Metadata should account for most of the memory difference.\n        \"\"\"\n        r = self.ImageContainer(img_path)\n        r.dask_data\n        return r\n\nclass OmeTiffReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.ome_tiff_reader.OmeTiffReader", "name": "benchmark_image_containers.OmeTiffReaderSuite.peakmem_delayed_array", "param_names": ["param1"], "params": [["'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/actk.ome.tiff'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/pre-variance-cfe.ome.tiff'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variance-cfe.ome.tiff'"]], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "2f3a7646291da725755ce221d361c286b11f631c66c0af85008b304ca78938ab"}, "benchmark_image_containers.OmeTiffReaderSuite.peakmem_init": {"code": "class _ImageContainerMemorySuite:\n    def peakmem_init(self, img_path):\n        \"\"\"\n        Benchmark how much memory is used for just the initialized image container.\n        \"\"\"\n        return self.ImageContainer(img_path)\n\nclass OmeTiffReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.ome_tiff_reader.OmeTiffReader", "name": "benchmark_image_containers.OmeTiffReaderSuite.peakmem_init", "param_names": ["param1"], "params": [["'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/actk.ome.tiff'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/pre-variance-cfe.ome.tiff'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variance-cfe.ome.tiff'"]], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "167df0b2150a2bb87391418b89231f29be78cf4cd066136941fb45b1e6dcc256"}, "benchmark_image_containers.OmeTiffReaderSuite.time_delayed_array_construct": {"code": "class _ImageContainerTimeSuite:\n    def time_delayed_array_construct(self, img_path, chunk_dims=None):\n        \"\"\"\n        Benchmark how long it takes to construct the delayed dask array for a file.\n        \"\"\"\n        if chunk_dims is None:\n            chunk_dims = DEFAULT_CHUNK_DIMS\n    \n        self.ImageContainer(img_path, chunk_dims=chunk_dims).dask_data\n\nclass OmeTiffReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.ome_tiff_reader.OmeTiffReader", "min_run_count": 2, "name": "benchmark_image_containers.OmeTiffReaderSuite.time_delayed_array_construct", "number": 0, "param_names": ["param1"], "params": [["'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/actk.ome.tiff'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/pre-variance-cfe.ome.tiff'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variance-cfe.ome.tiff'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "264c3fb775032f765ee93895dcd26948d5d662e992c08cf914bdd4aa40a263ad", "warmup_time": -1}, "benchmark_image_containers.OmeTiffReaderSuite.time_init": {"code": "class _ImageContainerTimeSuite:\n    def time_init(self, img_path, chunk_dims=None):\n        \"\"\"\n        Benchmark how long it takes to validate a file and finish general setup.\n        \"\"\"\n        if chunk_dims is None:\n            chunk_dims = DEFAULT_CHUNK_DIMS\n    \n        self.ImageContainer(img_path, chunk_dims=chunk_dims)\n\nclass OmeTiffReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.ome_tiff_reader.OmeTiffReader", "min_run_count": 2, "name": "benchmark_image_containers.OmeTiffReaderSuite.time_init", "number": 0, "param_names": ["param1"], "params": [["'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/actk.ome.tiff'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/pre-variance-cfe.ome.tiff'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variance-cfe.ome.tiff'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "c4447302cb28e80f254f6def7a9e9f1b96484e94091a65084fcfa9b58905b0f7", "warmup_time": -1}, "benchmark_image_containers.OmeTiffReaderSuite.time_random_many_chunk_read": {"code": "class _ImageContainerTimeSuite:\n    def time_random_many_chunk_read(self, img_path, chunk_dims=None):\n        \"\"\"\n        Open a file, get many chunks out of the file at once.\n    \n        I.E. \"Pull the DNA and Nucleus channel z-stacks, for the middle 50% timepoints\".\n        \"\"\"\n        if chunk_dims is None:\n            chunk_dims = DEFAULT_CHUNK_DIMS\n    \n        r = self.ImageContainer(img_path, chunk_dims=chunk_dims)\n    \n        random_index_selections = {}\n        for dim, size in zip(r.dims.order, r.dims.shape):\n            if dim not in self.DEFAULT_CHUNK_DIMS:\n                a = random.randint(0, size - 1)\n                b = random.randint(0, size - 1)\n                lower = min(a, b)\n                upper = max(a, b)\n                random_index_selections[dim] = slice(lower, upper, 1)\n    \n        r.get_image_dask_data(r.dims.order, **random_index_selections).compute()\n\nclass OmeTiffReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.ome_tiff_reader.OmeTiffReader", "min_run_count": 2, "name": "benchmark_image_containers.OmeTiffReaderSuite.time_random_many_chunk_read", "number": 0, "param_names": ["param1"], "params": [["'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/actk.ome.tiff'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/pre-variance-cfe.ome.tiff'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variance-cfe.ome.tiff'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "be4520d501b4f4d89cf133fbece839c58d89806dcebe7c7e7dc518a35ef714ff", "warmup_time": -1}, "benchmark_image_containers.OmeTiffReaderSuite.time_random_single_chunk_read": {"code": "class _ImageContainerTimeSuite:\n    def time_random_single_chunk_read(self, img_path, chunk_dims=None):\n        \"\"\"\n        Benchmark how long it takes to read a single chunk out of a file.\n    \n        I.E. \"Pull just the Brightfield channel z-stack.\n        \"\"\"\n        if chunk_dims is None:\n            chunk_dims = DEFAULT_CHUNK_DIMS\n    \n        r = self.ImageContainer(img_path, chunk_dims=chunk_dims)\n    \n        random_index_selections = {}\n        for dim, size in zip(r.dims.order, r.dims.shape):\n            if dim not in self.DEFAULT_CHUNK_DIMS:\n                random_index_selections[dim] = random.randint(0, size - 1)\n    \n        valid_dims_to_return = \"\".join(\n            [d for d in r.dims.order if d in self.DEFAULT_CHUNK_DIMS]\n        )\n        r.get_image_dask_data(valid_dims_to_return, **random_index_selections).compute()\n\nclass OmeTiffReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.ome_tiff_reader.OmeTiffReader", "min_run_count": 2, "name": "benchmark_image_containers.OmeTiffReaderSuite.time_random_single_chunk_read", "number": 0, "param_names": ["param1"], "params": [["'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/actk.ome.tiff'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/pre-variance-cfe.ome.tiff'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variance-cfe.ome.tiff'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "e14faaa38ddc7e183dc587dc9673f65e1c74b9b93abfa78ccbce115d14869ef0", "warmup_time": -1}, "benchmark_image_containers.OmeTiledTiffReaderSuite.peakmem_cached_array": {"code": "class _ImageContainerMemorySuite:\n    def peakmem_cached_array(self, img_path):\n        \"\"\"\n        Benchmark how much memory is used for the whole image container once the\n        current scene is read into memory.\n    \n        Serves as a comparison against the delayed construct and as a sanity check.\n        Estimate: `r.data.size * r.data.itemsize` + some metadata and object overhead.\n        \"\"\"\n        r = self.ImageContainer(img_path)\n        r.data\n        return r\n\nclass OmeTiledTiffReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.bfio_reader.OmeTiledTiffReader", "name": "benchmark_image_containers.OmeTiledTiffReaderSuite.peakmem_cached_array", "param_names": ["param1"], "params": [["'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/actk_ome_tiff_tiles.ome.tif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/pre-variance-cfe_ome_tiff_tiles.ome.tif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variance-cfe_ome_tiff_tiles.ome.tif'"]], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "41118f4f5f8a203951ac57fe0855ccdac63dd57794bf020eb75182a05b90cdac"}, "benchmark_image_containers.OmeTiledTiffReaderSuite.peakmem_delayed_array": {"code": "class _ImageContainerMemorySuite:\n    def peakmem_delayed_array(self, img_path):\n        \"\"\"\n        Benchmark how much memory is used for the image container once the\n        delayed dask array is constructed.\n    \n        Serves as a comparison against the init.\n        Metadata should account for most of the memory difference.\n        \"\"\"\n        r = self.ImageContainer(img_path)\n        r.dask_data\n        return r\n\nclass OmeTiledTiffReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.bfio_reader.OmeTiledTiffReader", "name": "benchmark_image_containers.OmeTiledTiffReaderSuite.peakmem_delayed_array", "param_names": ["param1"], "params": [["'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/actk_ome_tiff_tiles.ome.tif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/pre-variance-cfe_ome_tiff_tiles.ome.tif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variance-cfe_ome_tiff_tiles.ome.tif'"]], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "bb71e33fa24aec352baf5d2a8ae0acebe591470e463048a351c3470c1cbc52aa"}, "benchmark_image_containers.OmeTiledTiffReaderSuite.peakmem_init": {"code": "class _ImageContainerMemorySuite:\n    def peakmem_init(self, img_path):\n        \"\"\"\n        Benchmark how much memory is used for just the initialized image container.\n        \"\"\"\n        return self.ImageContainer(img_path)\n\nclass OmeTiledTiffReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.bfio_reader.OmeTiledTiffReader", "name": "benchmark_image_containers.OmeTiledTiffReaderSuite.peakmem_init", "param_names": ["param1"], "params": [["'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/actk_ome_tiff_tiles.ome.tif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/pre-variance-cfe_ome_tiff_tiles.ome.tif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variance-cfe_ome_tiff_tiles.ome.tif'"]], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "49afbb6ef291d6aff5b1f51ccc90d7c566c4384c5a12eeeb623b1ab6d0a35493"}, "benchmark_image_containers.OmeTiledTiffReaderSuite.time_delayed_array_construct": {"code": "class _ImageContainerTimeSuite:\n    def time_delayed_array_construct(self, img_path, chunk_dims=None):\n        \"\"\"\n        Benchmark how long it takes to construct the delayed dask array for a file.\n        \"\"\"\n        if chunk_dims is None:\n            chunk_dims = DEFAULT_CHUNK_DIMS\n    \n        self.ImageContainer(img_path, chunk_dims=chunk_dims).dask_data\n\nclass OmeTiledTiffReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.bfio_reader.OmeTiledTiffReader", "min_run_count": 2, "name": "benchmark_image_containers.OmeTiledTiffReaderSuite.time_delayed_array_construct", "number": 0, "param_names": ["param1"], "params": [["'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/actk_ome_tiff_tiles.ome.tif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/pre-variance-cfe_ome_tiff_tiles.ome.tif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variance-cfe_ome_tiff_tiles.ome.tif'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "47209d0070bf30825a16528ba2651b0a448595dd80940948d764bbd86e790452", "warmup_time": -1}, "benchmark_image_containers.OmeTiledTiffReaderSuite.time_init": {"code": "class _ImageContainerTimeSuite:\n    def time_init(self, img_path, chunk_dims=None):\n        \"\"\"\n        Benchmark how long it takes to validate a file and finish general setup.\n        \"\"\"\n        if chunk_dims is None:\n            chunk_dims = DEFAULT_CHUNK_DIMS\n    \n        self.ImageContainer(img_path, chunk_dims=chunk_dims)\n\nclass OmeTiledTiffReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.bfio_reader.OmeTiledTiffReader", "min_run_count": 2, "name": "benchmark_image_containers.OmeTiledTiffReaderSuite.time_init", "number": 0, "param_names": ["param1"], "params": [["'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/actk_ome_tiff_tiles.ome.tif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/pre-variance-cfe_ome_tiff_tiles.ome.tif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variance-cfe_ome_tiff_tiles.ome.tif'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "67d0a38b3b3d157db283a805a0d52fe8b02394105b72e764e2287a4ebbfde6bb", "warmup_time": -1}, "benchmark_image_containers.OmeTiledTiffReaderSuite.time_random_many_chunk_read": {"code": "class _ImageContainerTimeSuite:\n    def time_random_many_chunk_read(self, img_path, chunk_dims=None):\n        \"\"\"\n        Open a file, get many chunks out of the file at once.\n    \n        I.E. \"Pull the DNA and Nucleus channel z-stacks, for the middle 50% timepoints\".\n        \"\"\"\n        if chunk_dims is None:\n            chunk_dims = DEFAULT_CHUNK_DIMS\n    \n        r = self.ImageContainer(img_path, chunk_dims=chunk_dims)\n    \n        random_index_selections = {}\n        for dim, size in zip(r.dims.order, r.dims.shape):\n            if dim not in self.DEFAULT_CHUNK_DIMS:\n                a = random.randint(0, size - 1)\n                b = random.randint(0, size - 1)\n                lower = min(a, b)\n                upper = max(a, b)\n                random_index_selections[dim] = slice(lower, upper, 1)\n    \n        r.get_image_dask_data(r.dims.order, **random_index_selections).compute()\n\nclass OmeTiledTiffReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.bfio_reader.OmeTiledTiffReader", "min_run_count": 2, "name": "benchmark_image_containers.OmeTiledTiffReaderSuite.time_random_many_chunk_read", "number": 0, "param_names": ["param1"], "params": [["'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/actk_ome_tiff_tiles.ome.tif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/pre-variance-cfe_ome_tiff_tiles.ome.tif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variance-cfe_ome_tiff_tiles.ome.tif'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "54610dad5b4a24c9ecc55d0f5db7ce9a11e4cdbc0b0e6cfcebd08483f1028961", "warmup_time": -1}, "benchmark_image_containers.OmeTiledTiffReaderSuite.time_random_single_chunk_read": {"code": "class _ImageContainerTimeSuite:\n    def time_random_single_chunk_read(self, img_path, chunk_dims=None):\n        \"\"\"\n        Benchmark how long it takes to read a single chunk out of a file.\n    \n        I.E. \"Pull just the Brightfield channel z-stack.\n        \"\"\"\n        if chunk_dims is None:\n            chunk_dims = DEFAULT_CHUNK_DIMS\n    \n        r = self.ImageContainer(img_path, chunk_dims=chunk_dims)\n    \n        random_index_selections = {}\n        for dim, size in zip(r.dims.order, r.dims.shape):\n            if dim not in self.DEFAULT_CHUNK_DIMS:\n                random_index_selections[dim] = random.randint(0, size - 1)\n    \n        valid_dims_to_return = \"\".join(\n            [d for d in r.dims.order if d in self.DEFAULT_CHUNK_DIMS]\n        )\n        r.get_image_dask_data(valid_dims_to_return, **random_index_selections).compute()\n\nclass OmeTiledTiffReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.bfio_reader.OmeTiledTiffReader", "min_run_count": 2, "name": "benchmark_image_containers.OmeTiledTiffReaderSuite.time_random_single_chunk_read", "number": 0, "param_names": ["param1"], "params": [["'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/actk_ome_tiff_tiles.ome.tif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/pre-variance-cfe_ome_tiff_tiles.ome.tif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variance-cfe_ome_tiff_tiles.ome.tif'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "c1adfae7ca5dd9a24297ab55ff70c1304fa33e1d037b3c969baf4d58c6767468", "warmup_time": -1}, "benchmark_image_containers.TiffReaderSuite.peakmem_cached_array": {"code": "class _ImageContainerMemorySuite:\n    def peakmem_cached_array(self, img_path):\n        \"\"\"\n        Benchmark how much memory is used for the whole image container once the\n        current scene is read into memory.\n    \n        Serves as a comparison against the delayed construct and as a sanity check.\n        Estimate: `r.data.size * r.data.itemsize` + some metadata and object overhead.\n        \"\"\"\n        r = self.ImageContainer(img_path)\n        r.data\n        return r\n\nclass TiffReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.tiff_reader.TiffReader", "name": "benchmark_image_containers.TiffReaderSuite.peakmem_cached_array", "param_names": ["param1"], "params": [["'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/image_stack_tpzc_50tp_2p_5z_3c_512k_1_MMStack_2-Pos001_000.ome.tif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variance-cfe.ome.tiff'"]], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "c67862ddd9578dfec0508a9dec718432cec2cfd97d4dfa7f97e9c529f6645bf0"}, "benchmark_image_containers.TiffReaderSuite.peakmem_delayed_array": {"code": "class _ImageContainerMemorySuite:\n    def peakmem_delayed_array(self, img_path):\n        \"\"\"\n        Benchmark how much memory is used for the image container once the\n        delayed dask array is constructed.\n    \n        Serves as a comparison against the init.\n        Metadata should account for most of the memory difference.\n        \"\"\"\n        r = self.ImageContainer(img_path)\n        r.dask_data\n        return r\n\nclass TiffReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.tiff_reader.TiffReader", "name": "benchmark_image_containers.TiffReaderSuite.peakmem_delayed_array", "param_names": ["param1"], "params": [["'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/image_stack_tpzc_50tp_2p_5z_3c_512k_1_MMStack_2-Pos001_000.ome.tif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variance-cfe.ome.tiff'"]], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "00244546b18022a75d4ca56a24f2fabb910118a5231d85e1cc410c6dbfc5acbf"}, "benchmark_image_containers.TiffReaderSuite.peakmem_init": {"code": "class _ImageContainerMemorySuite:\n    def peakmem_init(self, img_path):\n        \"\"\"\n        Benchmark how much memory is used for just the initialized image container.\n        \"\"\"\n        return self.ImageContainer(img_path)\n\nclass TiffReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.tiff_reader.TiffReader", "name": "benchmark_image_containers.TiffReaderSuite.peakmem_init", "param_names": ["param1"], "params": [["'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/image_stack_tpzc_50tp_2p_5z_3c_512k_1_MMStack_2-Pos001_000.ome.tif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variance-cfe.ome.tiff'"]], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "dfebe330437fabfda8266fa818b3e8fb58d16ce0819c993444472950333e427f"}, "benchmark_image_containers.TiffReaderSuite.time_delayed_array_construct": {"code": "class _ImageContainerTimeSuite:\n    def time_delayed_array_construct(self, img_path, chunk_dims=None):\n        \"\"\"\n        Benchmark how long it takes to construct the delayed dask array for a file.\n        \"\"\"\n        if chunk_dims is None:\n            chunk_dims = DEFAULT_CHUNK_DIMS\n    \n        self.ImageContainer(img_path, chunk_dims=chunk_dims).dask_data\n\nclass TiffReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.tiff_reader.TiffReader", "min_run_count": 2, "name": "benchmark_image_containers.TiffReaderSuite.time_delayed_array_construct", "number": 0, "param_names": ["param1"], "params": [["'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/image_stack_tpzc_50tp_2p_5z_3c_512k_1_MMStack_2-Pos001_000.ome.tif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variance-cfe.ome.tiff'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "8ed9c8c5f1f45c3e9f887201f0c5c755aa71670626b98123ba907f9f5fc1c196", "warmup_time": -1}, "benchmark_image_containers.TiffReaderSuite.time_init": {"code": "class _ImageContainerTimeSuite:\n    def time_init(self, img_path, chunk_dims=None):\n        \"\"\"\n        Benchmark how long it takes to validate a file and finish general setup.\n        \"\"\"\n        if chunk_dims is None:\n            chunk_dims = DEFAULT_CHUNK_DIMS\n    \n        self.ImageContainer(img_path, chunk_dims=chunk_dims)\n\nclass TiffReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.tiff_reader.TiffReader", "min_run_count": 2, "name": "benchmark_image_containers.TiffReaderSuite.time_init", "number": 0, "param_names": ["param1"], "params": [["'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/image_stack_tpzc_50tp_2p_5z_3c_512k_1_MMStack_2-Pos001_000.ome.tif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variance-cfe.ome.tiff'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "76ced0481441cb2c3ec523dd03c80366e811b21e2d1f8ce63a0b74708644b17f", "warmup_time": -1}, "benchmark_image_containers.TiffReaderSuite.time_random_many_chunk_read": {"code": "class _ImageContainerTimeSuite:\n    def time_random_many_chunk_read(self, img_path, chunk_dims=None):\n        \"\"\"\n        Open a file, get many chunks out of the file at once.\n    \n        I.E. \"Pull the DNA and Nucleus channel z-stacks, for the middle 50% timepoints\".\n        \"\"\"\n        if chunk_dims is None:\n            chunk_dims = DEFAULT_CHUNK_DIMS\n    \n        r = self.ImageContainer(img_path, chunk_dims=chunk_dims)\n    \n        random_index_selections = {}\n        for dim, size in zip(r.dims.order, r.dims.shape):\n            if dim not in self.DEFAULT_CHUNK_DIMS:\n                a = random.randint(0, size - 1)\n                b = random.randint(0, size - 1)\n                lower = min(a, b)\n                upper = max(a, b)\n                random_index_selections[dim] = slice(lower, upper, 1)\n    \n        r.get_image_dask_data(r.dims.order, **random_index_selections).compute()\n\nclass TiffReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.tiff_reader.TiffReader", "min_run_count": 2, "name": "benchmark_image_containers.TiffReaderSuite.time_random_many_chunk_read", "number": 0, "param_names": ["param1"], "params": [["'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/image_stack_tpzc_50tp_2p_5z_3c_512k_1_MMStack_2-Pos001_000.ome.tif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variance-cfe.ome.tiff'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "cc5f83e5c09fef69b5e20d9397b613ab0f1508a138e8ca2001977f9b5ec2ef04", "warmup_time": -1}, "benchmark_image_containers.TiffReaderSuite.time_random_single_chunk_read": {"code": "class _ImageContainerTimeSuite:\n    def time_random_single_chunk_read(self, img_path, chunk_dims=None):\n        \"\"\"\n        Benchmark how long it takes to read a single chunk out of a file.\n    \n        I.E. \"Pull just the Brightfield channel z-stack.\n        \"\"\"\n        if chunk_dims is None:\n            chunk_dims = DEFAULT_CHUNK_DIMS\n    \n        r = self.ImageContainer(img_path, chunk_dims=chunk_dims)\n    \n        random_index_selections = {}\n        for dim, size in zip(r.dims.order, r.dims.shape):\n            if dim not in self.DEFAULT_CHUNK_DIMS:\n                random_index_selections[dim] = random.randint(0, size - 1)\n    \n        valid_dims_to_return = \"\".join(\n            [d for d in r.dims.order if d in self.DEFAULT_CHUNK_DIMS]\n        )\n        r.get_image_dask_data(valid_dims_to_return, **random_index_selections).compute()\n\nclass TiffReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.tiff_reader.TiffReader", "min_run_count": 2, "name": "benchmark_image_containers.TiffReaderSuite.time_random_single_chunk_read", "number": 0, "param_names": ["param1"], "params": [["'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/image_stack_tpzc_50tp_2p_5z_3c_512k_1_MMStack_2-Pos001_000.ome.tif'", "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variance-cfe.ome.tiff'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "55d0086518d76cbdbdbe94d0197dc5b043363a578d0944762dc98a2826077fb7", "warmup_time": -1}, "benchmark_lib.LibCompareSuite.time_lib_config": {"code": "class LibCompareSuite:\n    def time_lib_config(self, func_name):\n        func = self.FUNC_LOOKUP[func_name]\n        func(ACTK_OME_TIFF).compute()", "min_run_count": 2, "name": "benchmark_lib.LibCompareSuite.time_lib_config", "number": 0, "param_names": ["param1"], "params": [["'aicsimageio-default-chunks'", "'aicsimageio-plane-chunks'", "'dask-image-imread-default'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "8681f209b1a4f938289ccb20e28565d250b21707b0f06d287b256257f07715c6", "warmup_time": -1}, "benchmark_lib.LibInitSuite.time_base_import": {"code": "class LibInitSuite:\n    def time_base_import(self):\n        \"\"\"\n        Benchmark how long it takes to import the library as a whole.\n        \"\"\"\n        import aicsimageio  # noqa: F401", "min_run_count": 2, "name": "benchmark_lib.LibInitSuite.time_base_import", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "6a7bb35740e158f24b444b978a3e0e09b3291ca6c32d78f5754cbdd41ec4581a", "warmup_time": -1}}, "machines": {"github-ci": {"machine": "github-ci", "version": 1}}, "tags": {"v3.0.0": 216, "v3.0.1": 226, "v3.0.2": 232, "v3.0.3": 259, "v3.0.4": 267, "v3.0.5": 270, "v3.0.6": 273, "v3.0.7": 277, "v3.1.0": 285, "v3.1.1": 296, "v3.1.2": 305, "v3.1.3": 312, "v3.1.4": 319, "v3.2.0": 341, "v3.2.1": 349, "v3.2.2": 357, "v3.2.3": 364, "v3.3.0": 379, "v3.3.1": 390, "v3.3.2": 400, "v3.3.3": 408, "v3.3.4": 412, "v3.3.5": 419, "v3.3.6": 527, "v3.3.7": 541, "v4.0.0": 560, "v4.0.0.dev0": 439, "v4.0.0.dev1": 445, "v4.0.0.dev2": 466, "v4.0.0.dev3": 479, "v4.0.0.dev4": 491, "v4.0.0.dev5": 509, "v4.0.0.dev6": 518, "v4.0.0.dev7": 538, "v4.0.0.dev8": 548, "v4.0.0.dev9": 554, "v4.0.1": 567, "v4.0.2": 585, "v4.0.3": 597, "v4.0.4": 612, "v4.0.5": 625, "v4.1.0": 640, "v4.2.0": 685, "v4.3.0": 704, "v4.4.0": 714, "v4.5.0": 736, "v4.5.1": 757, "v4.5.2": 761, "v4.6.0": 775, "v4.6.1": 785, "v4.6.2": 791, "v4.6.3": 797, "v4.6.4": 814, "v4.7.0": 829, "v4.8.0": 853, "v4.9.0": 883, "v4.9.1": 911, "v4.9.2": 929}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}