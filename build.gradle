buildscript {
    ext {
        artifactoryContextUrl = 'https://artifactory.corp.alleninstitute.org/artifactory'
    }
    repositories {
        maven {
            url "${artifactoryContextUrl}/maven-virtual"
        }
        mavenCentral()
    }
    dependencies {
        classpath('org.alleninstitute.aics:gradle-plugins:1.0.18')
    }
}

plugins {
    // To see taskGraph for a task, on the command line type
    //         ./gradlew <task0> <task1> ... taskTree
    // This will NOT execute the tasks - it will only show the tree
    id "com.dorongold.task-tree" version "1.3"

    // Need this to specify location of .m2 settings.xml
    id "net.linguica.maven-settings" version "0.5"
}

mavenSettings {
    userSettingsFileName = "/home/jenkins/.m2/settings.xml"
}

apply plugin: "idea"
apply plugin: "org.alleninstitute.git-info"

///////////////////////////////////////////////////////////////////////////////////
// Config
// - Artifact name will be in settings.gradle parallel to this
///////////////////////////////////////////////////////////////////////////////////

Map<String,String> makeEnv(String name) {
    // This mimics the environment manipulations of the venv activate script
    def map = new HashMap<String,String>(System.getenv())
    map.put("VIRTUAL_ENV", new File("venv/${name}").getAbsolutePath())
    map.put("PATH", "venv/${name}/bin:${map.getOrDefault("PATH", "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin")}")
    map.remove("PYTHONHOME")
    return map
}

ext {
    // The virtual env with name X will be created in ./venv/X
    pyVenvName = "x3"
    
    // The following will install the corresponding python version in the virtual env
    // One of python2 python2.7 python3 python3.6
    pyVenvPython = "python3"

    // The executable to use in the VEnv
    pyVenvExec = "python3"

    // The executable to use for requirements install and update in the VEnv
    pyVenvPip = "pip3"

    // The executable to use for linting
    pyFlake8Exec = "flake8"

    // SHORT HAND!
    pyExec = "venv/${pyVenvName}/bin/${pyVenvExec}"
    pyPip = "venv/${pyVenvName}/bin/${pyVenvPip}"
    pyFlake8 = "venv/${pyVenvName}/bin/${pyFlake8Exec}"

    // Python virtual environments need environment variable maintenance, too.
    pyEnv = makeEnv(pyVenvName)
}

task wrapper(type: Wrapper) {
    gradleVersion "4.7"
    distributionType "all"
}

project.version = "0.4"
project.group = "org.alleninstitute.aics.pypi"

///////////////////////////////////////////////////////////////////////////////////

task cleanVenv {
    doFirst {
        delete "venv"
    }
}

task createVersionFile {
    doFirst {
        def fileName = "${project.name}/version.py"
        file(fileName).text = """
# Autogenerated file
MODULE_VERSION = "${project.version}"
GIT_COMMIT_HASH = "${gitInfo.commitId}"
GIT_REMOTE_URL = "${gitInfo.remoteUrl}"
"""
    }
}

task createVirtualEnvEmpty {
    // This will assume virtualenv exists in the default project/system python
    description "Create the project virtual env in ./venv/<envname>"
    group "Python Virtual Environment Management"

    outputs.dirs("venv")
    outputs.file("venv/${pyVenvName}/bin/activate")

    doLast {
        exec {
            executable "virtualenv"
            args "-p", "${pyVenvPython}", "venv/${pyVenvName}"
        }
    }
}

task prepareVirtualEnv {
    dependsOn createVersionFile, createVirtualEnvEmpty
}

task installDependencies {
    description "Install the requirements in the virtual env if not present"
    group "Python Virtual Environment Management"

    dependsOn prepareVirtualEnv
    inputs.files("${pyPip}")

    doLast {
        exec {
            environment pyEnv
            executable "${pyPip}"
            args "install", "-r", "requirements.txt"
        }
    }
}

task clean {
    description "Clean all local build artifacts"
    group "Python Build/Test/Upload Management"

    doFirst {
        delete "build"
        delete "dist"
        delete ".eggs"
        delete ".pytest_cache"
        delete "${project.name}.egg-info"
    }
}

task cleanAll {
    description "Clean all the virtual environment (subdirectory) as well as all local build artifacts"
    group "Python Build/Test/Upload Management"

    dependsOn clean, cleanVenv
}

task testPackage {
    description "Run tests"
    group "Python Build/Test/Upload Management"

    doLast {
        exec {
            environment pyEnv
            executable "${pyExec}"
            args "setup.py", "test"
        }
    }
}

task lint {
    description "Run the linter"
    group "Python Build/Test/Upload Management"

    dependsOn installDependencies

    doLast {
        exec {
            environment pyEnv
            executable "${pyFlake8}"
            args "--count", "--exit-zero", "${rootProject.name}"
        }
    }
}

task build {
    description "Build the wheel for local inspection. This will also create the virtual env and run tests."
    group "Python Build/Test/Upload Management"

    dependsOn lint, testPackage
    inputs.files("${pyExec}")

    doLast {
        exec {
            environment pyEnv
            executable "${pyExec}"
            args "setup.py", "bdist_wheel"
        }
    }
}

task publish {
    description "Build and publish the wheel to the snapshot PyPi repo in artifactory. This will also create the virtual env and run tests."
    group "Python Build/Test/Upload Management"
    dependsOn build
    inputs.files("${pyExec}")

    doLast {
        exec {
            environment pyEnv
            executable "${pyExec}"
            args "setup.py", "bdist_wheel", "upload", "-r", "snapshot-local"
        }
    }
}
