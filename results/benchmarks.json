{
    "benchmark_chunk_sizes.ChunkSuite.time_delayed_array_construct": {
        "code": "class _ImageContainerTimeSuite:\n    def time_delayed_array_construct(self, img_path, chunk_dims=None):\n        \"\"\"\n        Benchmark how long it takes to construct the delayed dask array for a file.\n        \"\"\"\n        if chunk_dims is None:\n            chunk_dims = DEFAULT_CHUNK_DIMS\n    \n        self.ImageContainer(img_path, chunk_dims=chunk_dims).dask_data\n\nclass ChunkSuite:\n    def setup(self, img_path, chunk_dims):\n        random.seed(42)\n        self.ImageContainer = AICSImage",
        "min_run_count": 2,
        "name": "benchmark_chunk_sizes.ChunkSuite.time_delayed_array_construct",
        "number": 0,
        "param_names": [
            "param1",
            "param2"
        ],
        "params": [
            [
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/pre-variance-cfe.ome.tiff'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variance-cfe.ome.tiff'"
            ],
            [
                "'YX'",
                "'ZYX'",
                "'CYX'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "63a2c5328408b67562ba7a3ef0211dbcdf797d53bf9f8c2e0ab78b849dae38f5",
        "warmup_time": -1
    },
    "benchmark_chunk_sizes.ChunkSuite.time_init": {
        "code": "class _ImageContainerTimeSuite:\n    def time_init(self, img_path, chunk_dims=None):\n        \"\"\"\n        Benchmark how long it takes to validate a file and finish general setup.\n        \"\"\"\n        if chunk_dims is None:\n            chunk_dims = DEFAULT_CHUNK_DIMS\n    \n        self.ImageContainer(img_path, chunk_dims=chunk_dims)\n\nclass ChunkSuite:\n    def setup(self, img_path, chunk_dims):\n        random.seed(42)\n        self.ImageContainer = AICSImage",
        "min_run_count": 2,
        "name": "benchmark_chunk_sizes.ChunkSuite.time_init",
        "number": 0,
        "param_names": [
            "param1",
            "param2"
        ],
        "params": [
            [
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/pre-variance-cfe.ome.tiff'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variance-cfe.ome.tiff'"
            ],
            [
                "'YX'",
                "'ZYX'",
                "'CYX'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "be6a6438d283d464871510926fe0b9bfa8ed1091b3232dc6c46be4826a079ba6",
        "warmup_time": -1
    },
    "benchmark_chunk_sizes.ChunkSuite.time_norm_and_project": {
        "code": "class ChunkSuite:\n    def time_norm_and_project(self, img_path, chunk_dims):\n        \"\"\"\n        Benchmark how long a norm and project through Z takes\n        under various chunk dims configurations.\n        \"\"\"\n        # Init image container\n        r = self.ImageContainer(img_path, chunk_dims=chunk_dims)\n    \n        # Store all delayed projections\n        projs = []\n    \n        # Only run a random sample of two channels instead of all\n        selected_channels = random.sample(r.channel_names, 2)\n        for i, channel_name in enumerate(r.channel_names):\n            if channel_name in selected_channels:\n                # Select each channel\n                data = r.get_image_dask_data(\"ZYX\", C=i)\n    \n                # Get percentile norm by values\n                min_px_val, max_px_val = da.percentile(\n                    data.flatten(),\n                    [50.0, 99.8],\n                ).compute()\n    \n                # Norm\n                normed = (data - min_px_val) / (max_px_val - min_px_val)\n    \n                # Clip any values outside of 0 and 1\n                clipped = da.clip(normed, 0, 1)\n    \n                # Scale them between 0 and 255\n                scaled = clipped * 255\n    \n                # Create max project\n                projs.append(scaled.max(axis=0))\n    \n        # Compute all projections\n        projs = da.stack(projs)\n        projs.compute()\n\n    def setup(self, img_path, chunk_dims):\n        random.seed(42)\n        self.ImageContainer = AICSImage",
        "min_run_count": 2,
        "name": "benchmark_chunk_sizes.ChunkSuite.time_norm_and_project",
        "number": 0,
        "param_names": [
            "param1",
            "param2"
        ],
        "params": [
            [
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/pre-variance-cfe.ome.tiff'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variance-cfe.ome.tiff'"
            ],
            [
                "'YX'",
                "'ZYX'",
                "'CYX'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "b5dad3777502cbfe1b75b731cb0656d52034747c2c5c831437edb724814bc02a",
        "warmup_time": -1
    },
    "benchmark_chunk_sizes.ChunkSuite.time_random_many_chunk_read": {
        "code": "class _ImageContainerTimeSuite:\n    def time_random_many_chunk_read(self, img_path, chunk_dims=None):\n        \"\"\"\n        Open a file, get many chunks out of the file at once.\n    \n        I.E. \"Pull the DNA and Nucleus channel z-stacks, for the middle 50% timepoints\".\n        \"\"\"\n        if chunk_dims is None:\n            chunk_dims = DEFAULT_CHUNK_DIMS\n    \n        r = self.ImageContainer(img_path, chunk_dims=chunk_dims)\n    \n        random_index_selections = {}\n        for dim, size in zip(r.dims.order, r.dims.shape):\n            if dim not in self.DEFAULT_CHUNK_DIMS:\n                a = random.randint(0, size - 1)\n                b = random.randint(0, size - 1)\n                lower = min(a, b)\n                upper = max(a, b)\n                random_index_selections[dim] = slice(lower, upper, 1)\n    \n        r.get_image_dask_data(r.dims.order, **random_index_selections).compute()\n\nclass ChunkSuite:\n    def setup(self, img_path, chunk_dims):\n        random.seed(42)\n        self.ImageContainer = AICSImage",
        "min_run_count": 2,
        "name": "benchmark_chunk_sizes.ChunkSuite.time_random_many_chunk_read",
        "number": 0,
        "param_names": [
            "param1",
            "param2"
        ],
        "params": [
            [
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/pre-variance-cfe.ome.tiff'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variance-cfe.ome.tiff'"
            ],
            [
                "'YX'",
                "'ZYX'",
                "'CYX'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "606fb733a24f8a23ac4856dd1b4e4856505e46b429cc37e3bed6f1f5cbadc98c",
        "warmup_time": -1
    },
    "benchmark_chunk_sizes.ChunkSuite.time_random_single_chunk_read": {
        "code": "class _ImageContainerTimeSuite:\n    def time_random_single_chunk_read(self, img_path, chunk_dims=None):\n        \"\"\"\n        Benchmark how long it takes to read a single chunk out of a file.\n    \n        I.E. \"Pull just the Brightfield channel z-stack.\n        \"\"\"\n        if chunk_dims is None:\n            chunk_dims = DEFAULT_CHUNK_DIMS\n    \n        r = self.ImageContainer(img_path, chunk_dims=chunk_dims)\n    \n        random_index_selections = {}\n        for dim, size in zip(r.dims.order, r.dims.shape):\n            if dim not in self.DEFAULT_CHUNK_DIMS:\n                random_index_selections[dim] = random.randint(0, size - 1)\n    \n        valid_dims_to_return = \"\".join(\n            [d for d in r.dims.order if d in self.DEFAULT_CHUNK_DIMS]\n        )\n        r.get_image_dask_data(valid_dims_to_return, **random_index_selections).compute()\n\nclass ChunkSuite:\n    def setup(self, img_path, chunk_dims):\n        random.seed(42)\n        self.ImageContainer = AICSImage",
        "min_run_count": 2,
        "name": "benchmark_chunk_sizes.ChunkSuite.time_random_single_chunk_read",
        "number": 0,
        "param_names": [
            "param1",
            "param2"
        ],
        "params": [
            [
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/pre-variance-cfe.ome.tiff'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variance-cfe.ome.tiff'"
            ],
            [
                "'YX'",
                "'ZYX'",
                "'CYX'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "e2725a48590c460a3355d1b48e67fc837323d1910c4a47142381c62241284785",
        "warmup_time": -1
    },
    "benchmark_image_containers.AICSImageSuite.peakmem_cached_array": {
        "code": "class _ImageContainerMemorySuite:\n    def peakmem_cached_array(self, img_path):\n        \"\"\"\n        Benchmark how much memory is used for the whole image container once the\n        current scene is read into memory.\n    \n        Serves as a comparison against the delayed construct and as a sanity check.\n        Estimate: `r.data.size * r.data.itemsize` + some metadata and object overhead.\n        \"\"\"\n        r = self.ImageContainer(img_path)\n        r.data\n        return r\n\nclass AICSImageSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = AICSImage",
        "name": "benchmark_image_containers.AICSImageSuite.peakmem_cached_array",
        "param_names": [
            "param1"
        ],
        "params": [
            [
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variable_scene_shape_first_scene_pyramid.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_1_c_2_z_1.lif'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.bmp'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_4_c_2_z_1.lif'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/S=2_4x2_T=2=Z=3_CH=2.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/OverViewScan.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.jpg'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/actk.ome.tiff'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variance-cfe.ome.tiff'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.png'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/image_stack_tpzc_50tp_2p_5z_3c_512k_1_MMStack_2-Pos001_000.ome.tif'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/pre-variance-cfe.ome.tiff'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_1_c_1_z_1.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_3_t_1_c_3_z_5.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/tiled.lif'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/merged-tiles.lif'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/RGB-8bit.czi'"
            ]
        ],
        "timeout": 60.0,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "96bf4fa0e641225c55328c135e642531039558988c72c875aca5e23f613ab871"
    },
    "benchmark_image_containers.AICSImageSuite.peakmem_delayed_array": {
        "code": "class _ImageContainerMemorySuite:\n    def peakmem_delayed_array(self, img_path):\n        \"\"\"\n        Benchmark how much memory is used for the image container once the\n        delayed dask array is constructed.\n    \n        Serves as a comparison against the init.\n        Metadata should account for most of the memory difference.\n        \"\"\"\n        r = self.ImageContainer(img_path)\n        r.dask_data\n        return r\n\nclass AICSImageSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = AICSImage",
        "name": "benchmark_image_containers.AICSImageSuite.peakmem_delayed_array",
        "param_names": [
            "param1"
        ],
        "params": [
            [
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variable_scene_shape_first_scene_pyramid.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_1_c_2_z_1.lif'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.bmp'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_4_c_2_z_1.lif'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/S=2_4x2_T=2=Z=3_CH=2.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/OverViewScan.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.jpg'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/actk.ome.tiff'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variance-cfe.ome.tiff'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.png'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/image_stack_tpzc_50tp_2p_5z_3c_512k_1_MMStack_2-Pos001_000.ome.tif'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/pre-variance-cfe.ome.tiff'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_1_c_1_z_1.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_3_t_1_c_3_z_5.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/tiled.lif'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/merged-tiles.lif'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/RGB-8bit.czi'"
            ]
        ],
        "timeout": 60.0,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "45da41275febe6e273cc10ad8353b15f20a93c4c726c4b8300d2a8dfbf2b5f7f"
    },
    "benchmark_image_containers.AICSImageSuite.peakmem_init": {
        "code": "class _ImageContainerMemorySuite:\n    def peakmem_init(self, img_path):\n        \"\"\"\n        Benchmark how much memory is used for just the initialized image container.\n        \"\"\"\n        return self.ImageContainer(img_path)\n\nclass AICSImageSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = AICSImage",
        "name": "benchmark_image_containers.AICSImageSuite.peakmem_init",
        "param_names": [
            "param1"
        ],
        "params": [
            [
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variable_scene_shape_first_scene_pyramid.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_1_c_2_z_1.lif'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.bmp'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_4_c_2_z_1.lif'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/S=2_4x2_T=2=Z=3_CH=2.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/OverViewScan.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.jpg'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/actk.ome.tiff'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variance-cfe.ome.tiff'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.png'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/image_stack_tpzc_50tp_2p_5z_3c_512k_1_MMStack_2-Pos001_000.ome.tif'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/pre-variance-cfe.ome.tiff'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_1_c_1_z_1.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_3_t_1_c_3_z_5.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/tiled.lif'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/merged-tiles.lif'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/RGB-8bit.czi'"
            ]
        ],
        "timeout": 60.0,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "41eb1224e96f965e90b8901a2af478c879b7f73537eac38521e88c429d31cfae"
    },
    "benchmark_image_containers.AICSImageSuite.time_delayed_array_construct": {
        "code": "class _ImageContainerTimeSuite:\n    def time_delayed_array_construct(self, img_path, chunk_dims=None):\n        \"\"\"\n        Benchmark how long it takes to construct the delayed dask array for a file.\n        \"\"\"\n        if chunk_dims is None:\n            chunk_dims = DEFAULT_CHUNK_DIMS\n    \n        self.ImageContainer(img_path, chunk_dims=chunk_dims).dask_data\n\nclass AICSImageSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = AICSImage",
        "min_run_count": 2,
        "name": "benchmark_image_containers.AICSImageSuite.time_delayed_array_construct",
        "number": 0,
        "param_names": [
            "param1"
        ],
        "params": [
            [
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variable_scene_shape_first_scene_pyramid.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_1_c_2_z_1.lif'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.bmp'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_4_c_2_z_1.lif'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/S=2_4x2_T=2=Z=3_CH=2.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/OverViewScan.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.jpg'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/actk.ome.tiff'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variance-cfe.ome.tiff'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.png'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/image_stack_tpzc_50tp_2p_5z_3c_512k_1_MMStack_2-Pos001_000.ome.tif'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/pre-variance-cfe.ome.tiff'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_1_c_1_z_1.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_3_t_1_c_3_z_5.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/tiled.lif'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/merged-tiles.lif'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/RGB-8bit.czi'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "abf800930ee2a03c324713cd9c9dac12f46d3763499011107535f2699b710f21",
        "warmup_time": -1
    },
    "benchmark_image_containers.AICSImageSuite.time_init": {
        "code": "class _ImageContainerTimeSuite:\n    def time_init(self, img_path, chunk_dims=None):\n        \"\"\"\n        Benchmark how long it takes to validate a file and finish general setup.\n        \"\"\"\n        if chunk_dims is None:\n            chunk_dims = DEFAULT_CHUNK_DIMS\n    \n        self.ImageContainer(img_path, chunk_dims=chunk_dims)\n\nclass AICSImageSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = AICSImage",
        "min_run_count": 2,
        "name": "benchmark_image_containers.AICSImageSuite.time_init",
        "number": 0,
        "param_names": [
            "param1"
        ],
        "params": [
            [
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variable_scene_shape_first_scene_pyramid.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_1_c_2_z_1.lif'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.bmp'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_4_c_2_z_1.lif'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/S=2_4x2_T=2=Z=3_CH=2.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/OverViewScan.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.jpg'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/actk.ome.tiff'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variance-cfe.ome.tiff'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.png'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/image_stack_tpzc_50tp_2p_5z_3c_512k_1_MMStack_2-Pos001_000.ome.tif'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/pre-variance-cfe.ome.tiff'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_1_c_1_z_1.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_3_t_1_c_3_z_5.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/tiled.lif'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/merged-tiles.lif'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/RGB-8bit.czi'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "6be052362717a92084bf41b6768ca4a4a7e2d6cb0d5bcb7bf5376937ce31abbe",
        "warmup_time": -1
    },
    "benchmark_image_containers.AICSImageSuite.time_random_many_chunk_read": {
        "code": "class _ImageContainerTimeSuite:\n    def time_random_many_chunk_read(self, img_path, chunk_dims=None):\n        \"\"\"\n        Open a file, get many chunks out of the file at once.\n    \n        I.E. \"Pull the DNA and Nucleus channel z-stacks, for the middle 50% timepoints\".\n        \"\"\"\n        if chunk_dims is None:\n            chunk_dims = DEFAULT_CHUNK_DIMS\n    \n        r = self.ImageContainer(img_path, chunk_dims=chunk_dims)\n    \n        random_index_selections = {}\n        for dim, size in zip(r.dims.order, r.dims.shape):\n            if dim not in self.DEFAULT_CHUNK_DIMS:\n                a = random.randint(0, size - 1)\n                b = random.randint(0, size - 1)\n                lower = min(a, b)\n                upper = max(a, b)\n                random_index_selections[dim] = slice(lower, upper, 1)\n    \n        r.get_image_dask_data(r.dims.order, **random_index_selections).compute()\n\nclass AICSImageSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = AICSImage",
        "min_run_count": 2,
        "name": "benchmark_image_containers.AICSImageSuite.time_random_many_chunk_read",
        "number": 0,
        "param_names": [
            "param1"
        ],
        "params": [
            [
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variable_scene_shape_first_scene_pyramid.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_1_c_2_z_1.lif'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.bmp'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_4_c_2_z_1.lif'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/S=2_4x2_T=2=Z=3_CH=2.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/OverViewScan.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.jpg'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/actk.ome.tiff'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variance-cfe.ome.tiff'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.png'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/image_stack_tpzc_50tp_2p_5z_3c_512k_1_MMStack_2-Pos001_000.ome.tif'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/pre-variance-cfe.ome.tiff'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_1_c_1_z_1.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_3_t_1_c_3_z_5.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/tiled.lif'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/merged-tiles.lif'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/RGB-8bit.czi'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "9fa851b3f927ca2cb74fa9776acaf19c7d2190689cd68aa98d43119980cfa33b",
        "warmup_time": -1
    },
    "benchmark_image_containers.AICSImageSuite.time_random_single_chunk_read": {
        "code": "class _ImageContainerTimeSuite:\n    def time_random_single_chunk_read(self, img_path, chunk_dims=None):\n        \"\"\"\n        Benchmark how long it takes to read a single chunk out of a file.\n    \n        I.E. \"Pull just the Brightfield channel z-stack.\n        \"\"\"\n        if chunk_dims is None:\n            chunk_dims = DEFAULT_CHUNK_DIMS\n    \n        r = self.ImageContainer(img_path, chunk_dims=chunk_dims)\n    \n        random_index_selections = {}\n        for dim, size in zip(r.dims.order, r.dims.shape):\n            if dim not in self.DEFAULT_CHUNK_DIMS:\n                random_index_selections[dim] = random.randint(0, size - 1)\n    \n        valid_dims_to_return = \"\".join(\n            [d for d in r.dims.order if d in self.DEFAULT_CHUNK_DIMS]\n        )\n        r.get_image_dask_data(valid_dims_to_return, **random_index_selections).compute()\n\nclass AICSImageSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = AICSImage",
        "min_run_count": 2,
        "name": "benchmark_image_containers.AICSImageSuite.time_random_single_chunk_read",
        "number": 0,
        "param_names": [
            "param1"
        ],
        "params": [
            [
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variable_scene_shape_first_scene_pyramid.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_1_c_2_z_1.lif'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.bmp'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_4_c_2_z_1.lif'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/S=2_4x2_T=2=Z=3_CH=2.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/OverViewScan.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.jpg'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/actk.ome.tiff'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variance-cfe.ome.tiff'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.png'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/image_stack_tpzc_50tp_2p_5z_3c_512k_1_MMStack_2-Pos001_000.ome.tif'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/pre-variance-cfe.ome.tiff'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_1_c_1_z_1.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_3_t_1_c_3_z_5.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/tiled.lif'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/merged-tiles.lif'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/RGB-8bit.czi'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "cbdef323fe6dcfbb6d8390552b0c83359922040ef9fe8561cde8db5617da1ecc",
        "warmup_time": -1
    },
    "benchmark_image_containers.CziReaderSuite.peakmem_cached_array": {
        "code": "class _ImageContainerMemorySuite:\n    def peakmem_cached_array(self, img_path):\n        \"\"\"\n        Benchmark how much memory is used for the whole image container once the\n        current scene is read into memory.\n    \n        Serves as a comparison against the delayed construct and as a sanity check.\n        Estimate: `r.data.size * r.data.itemsize` + some metadata and object overhead.\n        \"\"\"\n        r = self.ImageContainer(img_path)\n        r.data\n        return r\n\nclass CziReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.czi_reader.CziReader",
        "name": "benchmark_image_containers.CziReaderSuite.peakmem_cached_array",
        "param_names": [
            "param1"
        ],
        "params": [
            [
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/OverViewScan.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/RGB-8bit.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/S=2_4x2_T=2=Z=3_CH=2.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_1_c_1_z_1.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_3_t_1_c_3_z_5.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variable_scene_shape_first_scene_pyramid.czi'"
            ]
        ],
        "timeout": 60.0,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "9808d4aa73201880928bc54761a214a050232b9c6ef59d552dea28247befd511"
    },
    "benchmark_image_containers.CziReaderSuite.peakmem_delayed_array": {
        "code": "class _ImageContainerMemorySuite:\n    def peakmem_delayed_array(self, img_path):\n        \"\"\"\n        Benchmark how much memory is used for the image container once the\n        delayed dask array is constructed.\n    \n        Serves as a comparison against the init.\n        Metadata should account for most of the memory difference.\n        \"\"\"\n        r = self.ImageContainer(img_path)\n        r.dask_data\n        return r\n\nclass CziReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.czi_reader.CziReader",
        "name": "benchmark_image_containers.CziReaderSuite.peakmem_delayed_array",
        "param_names": [
            "param1"
        ],
        "params": [
            [
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/OverViewScan.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/RGB-8bit.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/S=2_4x2_T=2=Z=3_CH=2.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_1_c_1_z_1.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_3_t_1_c_3_z_5.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variable_scene_shape_first_scene_pyramid.czi'"
            ]
        ],
        "timeout": 60.0,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "44c00825f9656cf30f7368a8a320ed187e18dce4a9d5a433fdd49d9b7d6ed062"
    },
    "benchmark_image_containers.CziReaderSuite.peakmem_init": {
        "code": "class _ImageContainerMemorySuite:\n    def peakmem_init(self, img_path):\n        \"\"\"\n        Benchmark how much memory is used for just the initialized image container.\n        \"\"\"\n        return self.ImageContainer(img_path)\n\nclass CziReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.czi_reader.CziReader",
        "name": "benchmark_image_containers.CziReaderSuite.peakmem_init",
        "param_names": [
            "param1"
        ],
        "params": [
            [
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/OverViewScan.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/RGB-8bit.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/S=2_4x2_T=2=Z=3_CH=2.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_1_c_1_z_1.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_3_t_1_c_3_z_5.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variable_scene_shape_first_scene_pyramid.czi'"
            ]
        ],
        "timeout": 60.0,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "33f1857abd218a5e2714a368e151c551702b377c0c4d7d4bcd414d93455b871e"
    },
    "benchmark_image_containers.CziReaderSuite.time_delayed_array_construct": {
        "code": "class _ImageContainerTimeSuite:\n    def time_delayed_array_construct(self, img_path, chunk_dims=None):\n        \"\"\"\n        Benchmark how long it takes to construct the delayed dask array for a file.\n        \"\"\"\n        if chunk_dims is None:\n            chunk_dims = DEFAULT_CHUNK_DIMS\n    \n        self.ImageContainer(img_path, chunk_dims=chunk_dims).dask_data\n\nclass CziReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.czi_reader.CziReader",
        "min_run_count": 2,
        "name": "benchmark_image_containers.CziReaderSuite.time_delayed_array_construct",
        "number": 0,
        "param_names": [
            "param1"
        ],
        "params": [
            [
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/OverViewScan.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/RGB-8bit.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/S=2_4x2_T=2=Z=3_CH=2.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_1_c_1_z_1.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_3_t_1_c_3_z_5.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variable_scene_shape_first_scene_pyramid.czi'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "1f22b74d4730f78edc65bc835e7ed7194a5e4726e36ae8b486240a5a9ff2aa27",
        "warmup_time": -1
    },
    "benchmark_image_containers.CziReaderSuite.time_init": {
        "code": "class _ImageContainerTimeSuite:\n    def time_init(self, img_path, chunk_dims=None):\n        \"\"\"\n        Benchmark how long it takes to validate a file and finish general setup.\n        \"\"\"\n        if chunk_dims is None:\n            chunk_dims = DEFAULT_CHUNK_DIMS\n    \n        self.ImageContainer(img_path, chunk_dims=chunk_dims)\n\nclass CziReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.czi_reader.CziReader",
        "min_run_count": 2,
        "name": "benchmark_image_containers.CziReaderSuite.time_init",
        "number": 0,
        "param_names": [
            "param1"
        ],
        "params": [
            [
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/OverViewScan.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/RGB-8bit.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/S=2_4x2_T=2=Z=3_CH=2.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_1_c_1_z_1.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_3_t_1_c_3_z_5.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variable_scene_shape_first_scene_pyramid.czi'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "a35ab39af3cc693148440dea0c634531305b4baf5570dec6222eac8a95344676",
        "warmup_time": -1
    },
    "benchmark_image_containers.CziReaderSuite.time_random_many_chunk_read": {
        "code": "class _ImageContainerTimeSuite:\n    def time_random_many_chunk_read(self, img_path, chunk_dims=None):\n        \"\"\"\n        Open a file, get many chunks out of the file at once.\n    \n        I.E. \"Pull the DNA and Nucleus channel z-stacks, for the middle 50% timepoints\".\n        \"\"\"\n        if chunk_dims is None:\n            chunk_dims = DEFAULT_CHUNK_DIMS\n    \n        r = self.ImageContainer(img_path, chunk_dims=chunk_dims)\n    \n        random_index_selections = {}\n        for dim, size in zip(r.dims.order, r.dims.shape):\n            if dim not in self.DEFAULT_CHUNK_DIMS:\n                a = random.randint(0, size - 1)\n                b = random.randint(0, size - 1)\n                lower = min(a, b)\n                upper = max(a, b)\n                random_index_selections[dim] = slice(lower, upper, 1)\n    \n        r.get_image_dask_data(r.dims.order, **random_index_selections).compute()\n\nclass CziReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.czi_reader.CziReader",
        "min_run_count": 2,
        "name": "benchmark_image_containers.CziReaderSuite.time_random_many_chunk_read",
        "number": 0,
        "param_names": [
            "param1"
        ],
        "params": [
            [
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/OverViewScan.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/RGB-8bit.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/S=2_4x2_T=2=Z=3_CH=2.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_1_c_1_z_1.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_3_t_1_c_3_z_5.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variable_scene_shape_first_scene_pyramid.czi'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "bd0408dd47278345053f801d752d57a82a9bb41ac558644a61e6b0989a3aa94d",
        "warmup_time": -1
    },
    "benchmark_image_containers.CziReaderSuite.time_random_single_chunk_read": {
        "code": "class _ImageContainerTimeSuite:\n    def time_random_single_chunk_read(self, img_path, chunk_dims=None):\n        \"\"\"\n        Benchmark how long it takes to read a single chunk out of a file.\n    \n        I.E. \"Pull just the Brightfield channel z-stack.\n        \"\"\"\n        if chunk_dims is None:\n            chunk_dims = DEFAULT_CHUNK_DIMS\n    \n        r = self.ImageContainer(img_path, chunk_dims=chunk_dims)\n    \n        random_index_selections = {}\n        for dim, size in zip(r.dims.order, r.dims.shape):\n            if dim not in self.DEFAULT_CHUNK_DIMS:\n                random_index_selections[dim] = random.randint(0, size - 1)\n    \n        valid_dims_to_return = \"\".join(\n            [d for d in r.dims.order if d in self.DEFAULT_CHUNK_DIMS]\n        )\n        r.get_image_dask_data(valid_dims_to_return, **random_index_selections).compute()\n\nclass CziReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.czi_reader.CziReader",
        "min_run_count": 2,
        "name": "benchmark_image_containers.CziReaderSuite.time_random_single_chunk_read",
        "number": 0,
        "param_names": [
            "param1"
        ],
        "params": [
            [
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/OverViewScan.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/RGB-8bit.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/S=2_4x2_T=2=Z=3_CH=2.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_1_c_1_z_1.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_3_t_1_c_3_z_5.czi'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variable_scene_shape_first_scene_pyramid.czi'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "3c55513549997795fa56eacb51185995d50cdc409ac486d786d5324de7af540d",
        "warmup_time": -1
    },
    "benchmark_image_containers.DefaultReaderSuite.peakmem_cached_array": {
        "code": "class _ImageContainerMemorySuite:\n    def peakmem_cached_array(self, img_path):\n        \"\"\"\n        Benchmark how much memory is used for the whole image container once the\n        current scene is read into memory.\n    \n        Serves as a comparison against the delayed construct and as a sanity check.\n        Estimate: `r.data.size * r.data.itemsize` + some metadata and object overhead.\n        \"\"\"\n        r = self.ImageContainer(img_path)\n        r.data\n        return r\n\nclass DefaultReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.default_reader.DefaultReader",
        "name": "benchmark_image_containers.DefaultReaderSuite.peakmem_cached_array",
        "param_names": [
            "param1"
        ],
        "params": [
            [
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.bmp'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.jpg'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.png'"
            ]
        ],
        "timeout": 60.0,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "a3f513519b2d92bee5feec6431e500b7dc115bf0f2d8a6259483d5638dec0232"
    },
    "benchmark_image_containers.DefaultReaderSuite.peakmem_delayed_array": {
        "code": "class _ImageContainerMemorySuite:\n    def peakmem_delayed_array(self, img_path):\n        \"\"\"\n        Benchmark how much memory is used for the image container once the\n        delayed dask array is constructed.\n    \n        Serves as a comparison against the init.\n        Metadata should account for most of the memory difference.\n        \"\"\"\n        r = self.ImageContainer(img_path)\n        r.dask_data\n        return r\n\nclass DefaultReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.default_reader.DefaultReader",
        "name": "benchmark_image_containers.DefaultReaderSuite.peakmem_delayed_array",
        "param_names": [
            "param1"
        ],
        "params": [
            [
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.bmp'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.jpg'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.png'"
            ]
        ],
        "timeout": 60.0,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "9a7b78d566cf94bcb09881d4efebb2890b5d18d78842766e1a65fc523df90d48"
    },
    "benchmark_image_containers.DefaultReaderSuite.peakmem_init": {
        "code": "class _ImageContainerMemorySuite:\n    def peakmem_init(self, img_path):\n        \"\"\"\n        Benchmark how much memory is used for just the initialized image container.\n        \"\"\"\n        return self.ImageContainer(img_path)\n\nclass DefaultReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.default_reader.DefaultReader",
        "name": "benchmark_image_containers.DefaultReaderSuite.peakmem_init",
        "param_names": [
            "param1"
        ],
        "params": [
            [
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.bmp'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.jpg'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.png'"
            ]
        ],
        "timeout": 60.0,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "0f3dc369b7619e22b40b45814175b296b58004bb6dedf4b87a13869522fc71c9"
    },
    "benchmark_image_containers.DefaultReaderSuite.time_delayed_array_construct": {
        "code": "class _ImageContainerTimeSuite:\n    def time_delayed_array_construct(self, img_path, chunk_dims=None):\n        \"\"\"\n        Benchmark how long it takes to construct the delayed dask array for a file.\n        \"\"\"\n        if chunk_dims is None:\n            chunk_dims = DEFAULT_CHUNK_DIMS\n    \n        self.ImageContainer(img_path, chunk_dims=chunk_dims).dask_data\n\nclass DefaultReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.default_reader.DefaultReader",
        "min_run_count": 2,
        "name": "benchmark_image_containers.DefaultReaderSuite.time_delayed_array_construct",
        "number": 0,
        "param_names": [
            "param1"
        ],
        "params": [
            [
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.bmp'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.jpg'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.png'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "a93e7fa54db0ccbaf57693d7f8438e78d6172fff3c1daa30a1b714eaef386141",
        "warmup_time": -1
    },
    "benchmark_image_containers.DefaultReaderSuite.time_init": {
        "code": "class _ImageContainerTimeSuite:\n    def time_init(self, img_path, chunk_dims=None):\n        \"\"\"\n        Benchmark how long it takes to validate a file and finish general setup.\n        \"\"\"\n        if chunk_dims is None:\n            chunk_dims = DEFAULT_CHUNK_DIMS\n    \n        self.ImageContainer(img_path, chunk_dims=chunk_dims)\n\nclass DefaultReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.default_reader.DefaultReader",
        "min_run_count": 2,
        "name": "benchmark_image_containers.DefaultReaderSuite.time_init",
        "number": 0,
        "param_names": [
            "param1"
        ],
        "params": [
            [
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.bmp'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.jpg'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.png'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "9051005b54d4374b1618bd93d5f57405a5949d5602db73e98c1598af1599805d",
        "warmup_time": -1
    },
    "benchmark_image_containers.DefaultReaderSuite.time_random_many_chunk_read": {
        "code": "class _ImageContainerTimeSuite:\n    def time_random_many_chunk_read(self, img_path, chunk_dims=None):\n        \"\"\"\n        Open a file, get many chunks out of the file at once.\n    \n        I.E. \"Pull the DNA and Nucleus channel z-stacks, for the middle 50% timepoints\".\n        \"\"\"\n        if chunk_dims is None:\n            chunk_dims = DEFAULT_CHUNK_DIMS\n    \n        r = self.ImageContainer(img_path, chunk_dims=chunk_dims)\n    \n        random_index_selections = {}\n        for dim, size in zip(r.dims.order, r.dims.shape):\n            if dim not in self.DEFAULT_CHUNK_DIMS:\n                a = random.randint(0, size - 1)\n                b = random.randint(0, size - 1)\n                lower = min(a, b)\n                upper = max(a, b)\n                random_index_selections[dim] = slice(lower, upper, 1)\n    \n        r.get_image_dask_data(r.dims.order, **random_index_selections).compute()\n\nclass DefaultReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.default_reader.DefaultReader",
        "min_run_count": 2,
        "name": "benchmark_image_containers.DefaultReaderSuite.time_random_many_chunk_read",
        "number": 0,
        "param_names": [
            "param1"
        ],
        "params": [
            [
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.bmp'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.jpg'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.png'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "f9611c4c11dfc2fdb39b33017ab1bd5cae0ecd8be287c3a1752728c08c0d9dbf",
        "warmup_time": -1
    },
    "benchmark_image_containers.DefaultReaderSuite.time_random_single_chunk_read": {
        "code": "class _ImageContainerTimeSuite:\n    def time_random_single_chunk_read(self, img_path, chunk_dims=None):\n        \"\"\"\n        Benchmark how long it takes to read a single chunk out of a file.\n    \n        I.E. \"Pull just the Brightfield channel z-stack.\n        \"\"\"\n        if chunk_dims is None:\n            chunk_dims = DEFAULT_CHUNK_DIMS\n    \n        r = self.ImageContainer(img_path, chunk_dims=chunk_dims)\n    \n        random_index_selections = {}\n        for dim, size in zip(r.dims.order, r.dims.shape):\n            if dim not in self.DEFAULT_CHUNK_DIMS:\n                random_index_selections[dim] = random.randint(0, size - 1)\n    \n        valid_dims_to_return = \"\".join(\n            [d for d in r.dims.order if d in self.DEFAULT_CHUNK_DIMS]\n        )\n        r.get_image_dask_data(valid_dims_to_return, **random_index_selections).compute()\n\nclass DefaultReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.default_reader.DefaultReader",
        "min_run_count": 2,
        "name": "benchmark_image_containers.DefaultReaderSuite.time_random_single_chunk_read",
        "number": 0,
        "param_names": [
            "param1"
        ],
        "params": [
            [
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.bmp'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.jpg'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/example.png'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "3e9957c6be057f681903108d59b0ac4bb5b916e7466f547f11a137ec672d071f",
        "warmup_time": -1
    },
    "benchmark_image_containers.LifReaderSuite.peakmem_cached_array": {
        "code": "class _ImageContainerMemorySuite:\n    def peakmem_cached_array(self, img_path):\n        \"\"\"\n        Benchmark how much memory is used for the whole image container once the\n        current scene is read into memory.\n    \n        Serves as a comparison against the delayed construct and as a sanity check.\n        Estimate: `r.data.size * r.data.itemsize` + some metadata and object overhead.\n        \"\"\"\n        r = self.ImageContainer(img_path)\n        r.data\n        return r\n\nclass LifReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.lif_reader.LifReader",
        "name": "benchmark_image_containers.LifReaderSuite.peakmem_cached_array",
        "param_names": [
            "param1"
        ],
        "params": [
            [
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/merged-tiles.lif'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_1_c_2_z_1.lif'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_4_c_2_z_1.lif'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/tiled.lif'"
            ]
        ],
        "timeout": 60.0,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "0cd762cd49201bea3ce2a0bab030812f5f5e5bc4bd199457424cff7ee615c9d6"
    },
    "benchmark_image_containers.LifReaderSuite.peakmem_delayed_array": {
        "code": "class _ImageContainerMemorySuite:\n    def peakmem_delayed_array(self, img_path):\n        \"\"\"\n        Benchmark how much memory is used for the image container once the\n        delayed dask array is constructed.\n    \n        Serves as a comparison against the init.\n        Metadata should account for most of the memory difference.\n        \"\"\"\n        r = self.ImageContainer(img_path)\n        r.dask_data\n        return r\n\nclass LifReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.lif_reader.LifReader",
        "name": "benchmark_image_containers.LifReaderSuite.peakmem_delayed_array",
        "param_names": [
            "param1"
        ],
        "params": [
            [
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/merged-tiles.lif'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_1_c_2_z_1.lif'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_4_c_2_z_1.lif'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/tiled.lif'"
            ]
        ],
        "timeout": 60.0,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "9c1649c2de07cb6ecc3376b73c07657c81447bccf215b40e158ea372d27be425"
    },
    "benchmark_image_containers.LifReaderSuite.peakmem_init": {
        "code": "class _ImageContainerMemorySuite:\n    def peakmem_init(self, img_path):\n        \"\"\"\n        Benchmark how much memory is used for just the initialized image container.\n        \"\"\"\n        return self.ImageContainer(img_path)\n\nclass LifReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.lif_reader.LifReader",
        "name": "benchmark_image_containers.LifReaderSuite.peakmem_init",
        "param_names": [
            "param1"
        ],
        "params": [
            [
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/merged-tiles.lif'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_1_c_2_z_1.lif'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_4_c_2_z_1.lif'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/tiled.lif'"
            ]
        ],
        "timeout": 60.0,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "fc74eb7c6a588e0e454ea69f4a1d06234ce31e6f12bca3d71d2163cff26539fa"
    },
    "benchmark_image_containers.LifReaderSuite.time_delayed_array_construct": {
        "code": "class _ImageContainerTimeSuite:\n    def time_delayed_array_construct(self, img_path, chunk_dims=None):\n        \"\"\"\n        Benchmark how long it takes to construct the delayed dask array for a file.\n        \"\"\"\n        if chunk_dims is None:\n            chunk_dims = DEFAULT_CHUNK_DIMS\n    \n        self.ImageContainer(img_path, chunk_dims=chunk_dims).dask_data\n\nclass LifReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.lif_reader.LifReader",
        "min_run_count": 2,
        "name": "benchmark_image_containers.LifReaderSuite.time_delayed_array_construct",
        "number": 0,
        "param_names": [
            "param1"
        ],
        "params": [
            [
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/merged-tiles.lif'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_1_c_2_z_1.lif'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_4_c_2_z_1.lif'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/tiled.lif'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "706b522d926247224e35716fb587c101705268401d22df7155c213139c9825ef",
        "warmup_time": -1
    },
    "benchmark_image_containers.LifReaderSuite.time_init": {
        "code": "class _ImageContainerTimeSuite:\n    def time_init(self, img_path, chunk_dims=None):\n        \"\"\"\n        Benchmark how long it takes to validate a file and finish general setup.\n        \"\"\"\n        if chunk_dims is None:\n            chunk_dims = DEFAULT_CHUNK_DIMS\n    \n        self.ImageContainer(img_path, chunk_dims=chunk_dims)\n\nclass LifReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.lif_reader.LifReader",
        "min_run_count": 2,
        "name": "benchmark_image_containers.LifReaderSuite.time_init",
        "number": 0,
        "param_names": [
            "param1"
        ],
        "params": [
            [
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/merged-tiles.lif'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_1_c_2_z_1.lif'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_4_c_2_z_1.lif'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/tiled.lif'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "bd8f9a76e6b85943499b95485e181bb01f2eaaadcd5f45fbe0a255ec0b8935df",
        "warmup_time": -1
    },
    "benchmark_image_containers.LifReaderSuite.time_random_many_chunk_read": {
        "code": "class _ImageContainerTimeSuite:\n    def time_random_many_chunk_read(self, img_path, chunk_dims=None):\n        \"\"\"\n        Open a file, get many chunks out of the file at once.\n    \n        I.E. \"Pull the DNA and Nucleus channel z-stacks, for the middle 50% timepoints\".\n        \"\"\"\n        if chunk_dims is None:\n            chunk_dims = DEFAULT_CHUNK_DIMS\n    \n        r = self.ImageContainer(img_path, chunk_dims=chunk_dims)\n    \n        random_index_selections = {}\n        for dim, size in zip(r.dims.order, r.dims.shape):\n            if dim not in self.DEFAULT_CHUNK_DIMS:\n                a = random.randint(0, size - 1)\n                b = random.randint(0, size - 1)\n                lower = min(a, b)\n                upper = max(a, b)\n                random_index_selections[dim] = slice(lower, upper, 1)\n    \n        r.get_image_dask_data(r.dims.order, **random_index_selections).compute()\n\nclass LifReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.lif_reader.LifReader",
        "min_run_count": 2,
        "name": "benchmark_image_containers.LifReaderSuite.time_random_many_chunk_read",
        "number": 0,
        "param_names": [
            "param1"
        ],
        "params": [
            [
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/merged-tiles.lif'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_1_c_2_z_1.lif'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_4_c_2_z_1.lif'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/tiled.lif'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "a383a9936dec04d88efca58b4f9eae2dc9eee6165a6ccd228e7bd7676569e748",
        "warmup_time": -1
    },
    "benchmark_image_containers.LifReaderSuite.time_random_single_chunk_read": {
        "code": "class _ImageContainerTimeSuite:\n    def time_random_single_chunk_read(self, img_path, chunk_dims=None):\n        \"\"\"\n        Benchmark how long it takes to read a single chunk out of a file.\n    \n        I.E. \"Pull just the Brightfield channel z-stack.\n        \"\"\"\n        if chunk_dims is None:\n            chunk_dims = DEFAULT_CHUNK_DIMS\n    \n        r = self.ImageContainer(img_path, chunk_dims=chunk_dims)\n    \n        random_index_selections = {}\n        for dim, size in zip(r.dims.order, r.dims.shape):\n            if dim not in self.DEFAULT_CHUNK_DIMS:\n                random_index_selections[dim] = random.randint(0, size - 1)\n    \n        valid_dims_to_return = \"\".join(\n            [d for d in r.dims.order if d in self.DEFAULT_CHUNK_DIMS]\n        )\n        r.get_image_dask_data(valid_dims_to_return, **random_index_selections).compute()\n\nclass LifReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.lif_reader.LifReader",
        "min_run_count": 2,
        "name": "benchmark_image_containers.LifReaderSuite.time_random_single_chunk_read",
        "number": 0,
        "param_names": [
            "param1"
        ],
        "params": [
            [
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/merged-tiles.lif'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_1_c_2_z_1.lif'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/s_1_t_4_c_2_z_1.lif'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/tiled.lif'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "8472450d15eba774cfd27ba199e2f0fcae8f72e93921d31d317f06fe41a3388c",
        "warmup_time": -1
    },
    "benchmark_image_containers.OmeTiffReaderSuite.peakmem_cached_array": {
        "code": "class _ImageContainerMemorySuite:\n    def peakmem_cached_array(self, img_path):\n        \"\"\"\n        Benchmark how much memory is used for the whole image container once the\n        current scene is read into memory.\n    \n        Serves as a comparison against the delayed construct and as a sanity check.\n        Estimate: `r.data.size * r.data.itemsize` + some metadata and object overhead.\n        \"\"\"\n        r = self.ImageContainer(img_path)\n        r.data\n        return r\n\nclass OmeTiffReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.ome_tiff_reader.OmeTiffReader",
        "name": "benchmark_image_containers.OmeTiffReaderSuite.peakmem_cached_array",
        "param_names": [
            "param1"
        ],
        "params": [
            [
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/actk.ome.tiff'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/pre-variance-cfe.ome.tiff'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variance-cfe.ome.tiff'"
            ]
        ],
        "timeout": 60.0,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "5f26a0e7129f3703cd0001a271dade511f1f87b23a31bcda5dec9669f5c4cec1"
    },
    "benchmark_image_containers.OmeTiffReaderSuite.peakmem_delayed_array": {
        "code": "class _ImageContainerMemorySuite:\n    def peakmem_delayed_array(self, img_path):\n        \"\"\"\n        Benchmark how much memory is used for the image container once the\n        delayed dask array is constructed.\n    \n        Serves as a comparison against the init.\n        Metadata should account for most of the memory difference.\n        \"\"\"\n        r = self.ImageContainer(img_path)\n        r.dask_data\n        return r\n\nclass OmeTiffReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.ome_tiff_reader.OmeTiffReader",
        "name": "benchmark_image_containers.OmeTiffReaderSuite.peakmem_delayed_array",
        "param_names": [
            "param1"
        ],
        "params": [
            [
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/actk.ome.tiff'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/pre-variance-cfe.ome.tiff'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variance-cfe.ome.tiff'"
            ]
        ],
        "timeout": 60.0,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "2f3a7646291da725755ce221d361c286b11f631c66c0af85008b304ca78938ab"
    },
    "benchmark_image_containers.OmeTiffReaderSuite.peakmem_init": {
        "code": "class _ImageContainerMemorySuite:\n    def peakmem_init(self, img_path):\n        \"\"\"\n        Benchmark how much memory is used for just the initialized image container.\n        \"\"\"\n        return self.ImageContainer(img_path)\n\nclass OmeTiffReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.ome_tiff_reader.OmeTiffReader",
        "name": "benchmark_image_containers.OmeTiffReaderSuite.peakmem_init",
        "param_names": [
            "param1"
        ],
        "params": [
            [
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/actk.ome.tiff'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/pre-variance-cfe.ome.tiff'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variance-cfe.ome.tiff'"
            ]
        ],
        "timeout": 60.0,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "167df0b2150a2bb87391418b89231f29be78cf4cd066136941fb45b1e6dcc256"
    },
    "benchmark_image_containers.OmeTiffReaderSuite.time_delayed_array_construct": {
        "code": "class _ImageContainerTimeSuite:\n    def time_delayed_array_construct(self, img_path, chunk_dims=None):\n        \"\"\"\n        Benchmark how long it takes to construct the delayed dask array for a file.\n        \"\"\"\n        if chunk_dims is None:\n            chunk_dims = DEFAULT_CHUNK_DIMS\n    \n        self.ImageContainer(img_path, chunk_dims=chunk_dims).dask_data\n\nclass OmeTiffReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.ome_tiff_reader.OmeTiffReader",
        "min_run_count": 2,
        "name": "benchmark_image_containers.OmeTiffReaderSuite.time_delayed_array_construct",
        "number": 0,
        "param_names": [
            "param1"
        ],
        "params": [
            [
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/actk.ome.tiff'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/pre-variance-cfe.ome.tiff'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variance-cfe.ome.tiff'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "264c3fb775032f765ee93895dcd26948d5d662e992c08cf914bdd4aa40a263ad",
        "warmup_time": -1
    },
    "benchmark_image_containers.OmeTiffReaderSuite.time_init": {
        "code": "class _ImageContainerTimeSuite:\n    def time_init(self, img_path, chunk_dims=None):\n        \"\"\"\n        Benchmark how long it takes to validate a file and finish general setup.\n        \"\"\"\n        if chunk_dims is None:\n            chunk_dims = DEFAULT_CHUNK_DIMS\n    \n        self.ImageContainer(img_path, chunk_dims=chunk_dims)\n\nclass OmeTiffReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.ome_tiff_reader.OmeTiffReader",
        "min_run_count": 2,
        "name": "benchmark_image_containers.OmeTiffReaderSuite.time_init",
        "number": 0,
        "param_names": [
            "param1"
        ],
        "params": [
            [
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/actk.ome.tiff'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/pre-variance-cfe.ome.tiff'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variance-cfe.ome.tiff'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "c4447302cb28e80f254f6def7a9e9f1b96484e94091a65084fcfa9b58905b0f7",
        "warmup_time": -1
    },
    "benchmark_image_containers.OmeTiffReaderSuite.time_random_many_chunk_read": {
        "code": "class _ImageContainerTimeSuite:\n    def time_random_many_chunk_read(self, img_path, chunk_dims=None):\n        \"\"\"\n        Open a file, get many chunks out of the file at once.\n    \n        I.E. \"Pull the DNA and Nucleus channel z-stacks, for the middle 50% timepoints\".\n        \"\"\"\n        if chunk_dims is None:\n            chunk_dims = DEFAULT_CHUNK_DIMS\n    \n        r = self.ImageContainer(img_path, chunk_dims=chunk_dims)\n    \n        random_index_selections = {}\n        for dim, size in zip(r.dims.order, r.dims.shape):\n            if dim not in self.DEFAULT_CHUNK_DIMS:\n                a = random.randint(0, size - 1)\n                b = random.randint(0, size - 1)\n                lower = min(a, b)\n                upper = max(a, b)\n                random_index_selections[dim] = slice(lower, upper, 1)\n    \n        r.get_image_dask_data(r.dims.order, **random_index_selections).compute()\n\nclass OmeTiffReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.ome_tiff_reader.OmeTiffReader",
        "min_run_count": 2,
        "name": "benchmark_image_containers.OmeTiffReaderSuite.time_random_many_chunk_read",
        "number": 0,
        "param_names": [
            "param1"
        ],
        "params": [
            [
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/actk.ome.tiff'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/pre-variance-cfe.ome.tiff'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variance-cfe.ome.tiff'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "be4520d501b4f4d89cf133fbece839c58d89806dcebe7c7e7dc518a35ef714ff",
        "warmup_time": -1
    },
    "benchmark_image_containers.OmeTiffReaderSuite.time_random_single_chunk_read": {
        "code": "class _ImageContainerTimeSuite:\n    def time_random_single_chunk_read(self, img_path, chunk_dims=None):\n        \"\"\"\n        Benchmark how long it takes to read a single chunk out of a file.\n    \n        I.E. \"Pull just the Brightfield channel z-stack.\n        \"\"\"\n        if chunk_dims is None:\n            chunk_dims = DEFAULT_CHUNK_DIMS\n    \n        r = self.ImageContainer(img_path, chunk_dims=chunk_dims)\n    \n        random_index_selections = {}\n        for dim, size in zip(r.dims.order, r.dims.shape):\n            if dim not in self.DEFAULT_CHUNK_DIMS:\n                random_index_selections[dim] = random.randint(0, size - 1)\n    \n        valid_dims_to_return = \"\".join(\n            [d for d in r.dims.order if d in self.DEFAULT_CHUNK_DIMS]\n        )\n        r.get_image_dask_data(valid_dims_to_return, **random_index_selections).compute()\n\nclass OmeTiffReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.ome_tiff_reader.OmeTiffReader",
        "min_run_count": 2,
        "name": "benchmark_image_containers.OmeTiffReaderSuite.time_random_single_chunk_read",
        "number": 0,
        "param_names": [
            "param1"
        ],
        "params": [
            [
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/actk.ome.tiff'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/pre-variance-cfe.ome.tiff'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variance-cfe.ome.tiff'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "e14faaa38ddc7e183dc587dc9673f65e1c74b9b93abfa78ccbce115d14869ef0",
        "warmup_time": -1
    },
    "benchmark_image_containers.TiffReaderSuite.peakmem_cached_array": {
        "code": "class _ImageContainerMemorySuite:\n    def peakmem_cached_array(self, img_path):\n        \"\"\"\n        Benchmark how much memory is used for the whole image container once the\n        current scene is read into memory.\n    \n        Serves as a comparison against the delayed construct and as a sanity check.\n        Estimate: `r.data.size * r.data.itemsize` + some metadata and object overhead.\n        \"\"\"\n        r = self.ImageContainer(img_path)\n        r.data\n        return r\n\nclass TiffReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.tiff_reader.TiffReader",
        "name": "benchmark_image_containers.TiffReaderSuite.peakmem_cached_array",
        "param_names": [
            "param1"
        ],
        "params": [
            [
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/image_stack_tpzc_50tp_2p_5z_3c_512k_1_MMStack_2-Pos001_000.ome.tif'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variance-cfe.ome.tiff'"
            ]
        ],
        "timeout": 60.0,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "c67862ddd9578dfec0508a9dec718432cec2cfd97d4dfa7f97e9c529f6645bf0"
    },
    "benchmark_image_containers.TiffReaderSuite.peakmem_delayed_array": {
        "code": "class _ImageContainerMemorySuite:\n    def peakmem_delayed_array(self, img_path):\n        \"\"\"\n        Benchmark how much memory is used for the image container once the\n        delayed dask array is constructed.\n    \n        Serves as a comparison against the init.\n        Metadata should account for most of the memory difference.\n        \"\"\"\n        r = self.ImageContainer(img_path)\n        r.dask_data\n        return r\n\nclass TiffReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.tiff_reader.TiffReader",
        "name": "benchmark_image_containers.TiffReaderSuite.peakmem_delayed_array",
        "param_names": [
            "param1"
        ],
        "params": [
            [
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/image_stack_tpzc_50tp_2p_5z_3c_512k_1_MMStack_2-Pos001_000.ome.tif'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variance-cfe.ome.tiff'"
            ]
        ],
        "timeout": 60.0,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "00244546b18022a75d4ca56a24f2fabb910118a5231d85e1cc410c6dbfc5acbf"
    },
    "benchmark_image_containers.TiffReaderSuite.peakmem_init": {
        "code": "class _ImageContainerMemorySuite:\n    def peakmem_init(self, img_path):\n        \"\"\"\n        Benchmark how much memory is used for just the initialized image container.\n        \"\"\"\n        return self.ImageContainer(img_path)\n\nclass TiffReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.tiff_reader.TiffReader",
        "name": "benchmark_image_containers.TiffReaderSuite.peakmem_init",
        "param_names": [
            "param1"
        ],
        "params": [
            [
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/image_stack_tpzc_50tp_2p_5z_3c_512k_1_MMStack_2-Pos001_000.ome.tif'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variance-cfe.ome.tiff'"
            ]
        ],
        "timeout": 60.0,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "dfebe330437fabfda8266fa818b3e8fb58d16ce0819c993444472950333e427f"
    },
    "benchmark_image_containers.TiffReaderSuite.time_delayed_array_construct": {
        "code": "class _ImageContainerTimeSuite:\n    def time_delayed_array_construct(self, img_path, chunk_dims=None):\n        \"\"\"\n        Benchmark how long it takes to construct the delayed dask array for a file.\n        \"\"\"\n        if chunk_dims is None:\n            chunk_dims = DEFAULT_CHUNK_DIMS\n    \n        self.ImageContainer(img_path, chunk_dims=chunk_dims).dask_data\n\nclass TiffReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.tiff_reader.TiffReader",
        "min_run_count": 2,
        "name": "benchmark_image_containers.TiffReaderSuite.time_delayed_array_construct",
        "number": 0,
        "param_names": [
            "param1"
        ],
        "params": [
            [
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/image_stack_tpzc_50tp_2p_5z_3c_512k_1_MMStack_2-Pos001_000.ome.tif'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variance-cfe.ome.tiff'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "8ed9c8c5f1f45c3e9f887201f0c5c755aa71670626b98123ba907f9f5fc1c196",
        "warmup_time": -1
    },
    "benchmark_image_containers.TiffReaderSuite.time_init": {
        "code": "class _ImageContainerTimeSuite:\n    def time_init(self, img_path, chunk_dims=None):\n        \"\"\"\n        Benchmark how long it takes to validate a file and finish general setup.\n        \"\"\"\n        if chunk_dims is None:\n            chunk_dims = DEFAULT_CHUNK_DIMS\n    \n        self.ImageContainer(img_path, chunk_dims=chunk_dims)\n\nclass TiffReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.tiff_reader.TiffReader",
        "min_run_count": 2,
        "name": "benchmark_image_containers.TiffReaderSuite.time_init",
        "number": 0,
        "param_names": [
            "param1"
        ],
        "params": [
            [
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/image_stack_tpzc_50tp_2p_5z_3c_512k_1_MMStack_2-Pos001_000.ome.tif'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variance-cfe.ome.tiff'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "76ced0481441cb2c3ec523dd03c80366e811b21e2d1f8ce63a0b74708644b17f",
        "warmup_time": -1
    },
    "benchmark_image_containers.TiffReaderSuite.time_random_many_chunk_read": {
        "code": "class _ImageContainerTimeSuite:\n    def time_random_many_chunk_read(self, img_path, chunk_dims=None):\n        \"\"\"\n        Open a file, get many chunks out of the file at once.\n    \n        I.E. \"Pull the DNA and Nucleus channel z-stacks, for the middle 50% timepoints\".\n        \"\"\"\n        if chunk_dims is None:\n            chunk_dims = DEFAULT_CHUNK_DIMS\n    \n        r = self.ImageContainer(img_path, chunk_dims=chunk_dims)\n    \n        random_index_selections = {}\n        for dim, size in zip(r.dims.order, r.dims.shape):\n            if dim not in self.DEFAULT_CHUNK_DIMS:\n                a = random.randint(0, size - 1)\n                b = random.randint(0, size - 1)\n                lower = min(a, b)\n                upper = max(a, b)\n                random_index_selections[dim] = slice(lower, upper, 1)\n    \n        r.get_image_dask_data(r.dims.order, **random_index_selections).compute()\n\nclass TiffReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.tiff_reader.TiffReader",
        "min_run_count": 2,
        "name": "benchmark_image_containers.TiffReaderSuite.time_random_many_chunk_read",
        "number": 0,
        "param_names": [
            "param1"
        ],
        "params": [
            [
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/image_stack_tpzc_50tp_2p_5z_3c_512k_1_MMStack_2-Pos001_000.ome.tif'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variance-cfe.ome.tiff'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "cc5f83e5c09fef69b5e20d9397b613ab0f1508a138e8ca2001977f9b5ec2ef04",
        "warmup_time": -1
    },
    "benchmark_image_containers.TiffReaderSuite.time_random_single_chunk_read": {
        "code": "class _ImageContainerTimeSuite:\n    def time_random_single_chunk_read(self, img_path, chunk_dims=None):\n        \"\"\"\n        Benchmark how long it takes to read a single chunk out of a file.\n    \n        I.E. \"Pull just the Brightfield channel z-stack.\n        \"\"\"\n        if chunk_dims is None:\n            chunk_dims = DEFAULT_CHUNK_DIMS\n    \n        r = self.ImageContainer(img_path, chunk_dims=chunk_dims)\n    \n        random_index_selections = {}\n        for dim, size in zip(r.dims.order, r.dims.shape):\n            if dim not in self.DEFAULT_CHUNK_DIMS:\n                random_index_selections[dim] = random.randint(0, size - 1)\n    \n        valid_dims_to_return = \"\".join(\n            [d for d in r.dims.order if d in self.DEFAULT_CHUNK_DIMS]\n        )\n        r.get_image_dask_data(valid_dims_to_return, **random_index_selections).compute()\n\nclass TiffReaderSuite:\n    def setup(self, img_path):\n        random.seed(42)\n        self.ImageContainer = readers.tiff_reader.TiffReader",
        "min_run_count": 2,
        "name": "benchmark_image_containers.TiffReaderSuite.time_random_single_chunk_read",
        "number": 0,
        "param_names": [
            "param1"
        ],
        "params": [
            [
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/image_stack_tpzc_50tp_2p_5z_3c_512k_1_MMStack_2-Pos001_000.ome.tif'",
                "'/home/runner/work/aicsimageio/aicsimageio/aicsimageio/tests/resources/variance-cfe.ome.tiff'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "55d0086518d76cbdbdbe94d0197dc5b043363a578d0944762dc98a2826077fb7",
        "warmup_time": -1
    },
    "benchmark_lib.LibCompareSuite.time_lib_config": {
        "code": "class LibCompareSuite:\n    def time_lib_config(self, func_name):\n        func = self.FUNC_LOOKUP[func_name]\n        func(ACTK_OME_TIFF).compute()",
        "min_run_count": 2,
        "name": "benchmark_lib.LibCompareSuite.time_lib_config",
        "number": 0,
        "param_names": [
            "param1"
        ],
        "params": [
            [
                "'aicsimageio-default-chunks'",
                "'aicsimageio-plane-chunks'",
                "'dask-image-imread-default'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "8681f209b1a4f938289ccb20e28565d250b21707b0f06d287b256257f07715c6",
        "warmup_time": -1
    },
    "benchmark_lib.LibInitSuite.time_base_import": {
        "code": "class LibInitSuite:\n    def time_base_import(self):\n        \"\"\"\n        Benchmark how long it takes to import the library as a whole.\n        \"\"\"\n        import aicsimageio  # noqa: F401",
        "min_run_count": 2,
        "name": "benchmark_lib.LibInitSuite.time_base_import",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "6a7bb35740e158f24b444b978a3e0e09b3291ca6c32d78f5754cbdd41ec4581a",
        "warmup_time": -1
    },
    "version": 2
}